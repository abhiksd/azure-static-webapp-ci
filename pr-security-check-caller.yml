name: PR Security Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  call-shared-pr-security:
    uses: YOUR_ORG/shared-ci-cd-workflows/.github/workflows/shared-pr-security.yml@main
    with:
      # Pass PR-specific information to shared workflow
      pr_number: ${{ github.event.inputs.pr_number || github.event.pull_request.number }}
      pr_head_sha: ${{ github.event.pull_request.head.sha || github.sha }}
      
      # All security configuration is centralized in the shared repository
      # No ability to override security settings from frontend applications
    
    secrets:
      # Security scanning secrets (set these in your frontend repo)
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      CHECKMARX_CLIENT_ID: ${{ secrets.CHECKMARX_CLIENT_ID }}
      CHECKMARX_SECRET: ${{ secrets.CHECKMARX_SECRET }}
      CHECKMARX_TENANT: ${{ secrets.CHECKMARX_TENANT }}
      CHECKMARX_BASE_URI: ${{ secrets.CHECKMARX_BASE_URI }}

  pr-comment:
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [call-shared-pr-security]
    permissions:
      pull-requests: write
    
    steps:
      - name: Generate PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const overallStatus = '${{ needs.call-shared-pr-security.outputs.overall-status }}';
            const sonarStatus = '${{ needs.call-shared-pr-security.outputs.sonar-status }}';
            const sonarCoverage = '${{ needs.call-shared-pr-security.outputs.sonar-coverage }}';
            const checkmarxStatus = '${{ needs.call-shared-pr-security.outputs.checkmarx-status }}';
            const checkmarxCritical = '${{ needs.call-shared-pr-security.outputs.checkmarx-critical }}';
            const checkmarxHigh = '${{ needs.call-shared-pr-security.outputs.checkmarx-high }}';
            
            let statusIcon = overallStatus === 'PASSED' ? '✅' : overallStatus === 'FAILED' ? '❌' : '⚠️';
            let commentBody = `## ${statusIcon} Security Check Results\n\n`;
            
            commentBody += `**Overall Status**: ${overallStatus}\n\n`;
            commentBody += `### Security Scan Details\n\n`;
            
            // SonarCloud results
            if (sonarStatus && sonarStatus !== 'SKIPPED') {
              const sonarIcon = sonarStatus === 'PASSED' ? '✅' : '❌';
              commentBody += `${sonarIcon} **SonarCloud**: ${sonarStatus}`;
              if (sonarCoverage) {
                commentBody += ` (Coverage: ${sonarCoverage}%)`;
              }
              commentBody += `\n`;
            } else {
              commentBody += `⚪ **SonarCloud**: DISABLED\n`;
            }
            
            // Checkmarx results
            if (checkmarxStatus && checkmarxStatus !== 'SKIPPED') {
              const checkmarxIcon = checkmarxStatus === 'PASSED' ? '✅' : '❌';
              commentBody += `${checkmarxIcon} **Checkmarx**: ${checkmarxStatus}`;
              if (checkmarxCritical !== undefined && checkmarxHigh !== undefined) {
                commentBody += ` (Critical: ${checkmarxCritical}, High: ${checkmarxHigh})`;
              }
              commentBody += `\n`;
            } else {
              commentBody += `⚪ **Checkmarx**: DISABLED\n`;
            }
            
            commentBody += `\n---\n`;
            commentBody += `*Security checks performed using shared workflow with centralized configuration*\n`;
            commentBody += `*Configuration controlled by DevOps team - no frontend overrides allowed*`;
            
            // Check if there are existing comments from this bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Check Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }