name: 'Security Scan'
description: 'Run security scans using SonarCloud and Checkmarx'

inputs:
  sonar-token:
    description: 'SonarCloud token'
    required: true
  sonar-organization:
    description: 'SonarCloud organization'
    required: false
    default: ''
  sonar-project-key:
    description: 'SonarCloud project key'
    required: false
    default: ''
  checkmarx-client:
    description: 'Checkmarx client ID'
    required: true
  checkmarx-secret:
    description: 'Checkmarx client secret'
    required: true
  checkmarx-server:
    description: 'Checkmarx server URL'
    required: true
  checkmarx-project-name:
    description: 'Checkmarx project name'
    required: false
    default: ''
  github-token:
    description: 'GitHub token for PR comments'
    required: true
  fail-on-quality-gate:
    description: 'Fail build if quality gate fails'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Install SonarCloud scanner
      shell: bash
      run: |
        npm install -g sonarqube-scanner

    - name: Run SonarCloud Scan
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      run: |
        # Set default values if not provided
        SONAR_ORG="${{ inputs.sonar-organization }}"
        SONAR_PROJECT="${{ inputs.sonar-project-key }}"
        
        if [ -z "$SONAR_ORG" ]; then
          SONAR_ORG=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        fi
        
        if [ -z "$SONAR_PROJECT" ]; then
          SONAR_PROJECT=$(echo $GITHUB_REPOSITORY | tr '/' '_')
        fi
        
        # Create sonar-project.properties if it doesn't exist
        if [ ! -f sonar-project.properties ]; then
          cat > sonar-project.properties << EOF
        sonar.projectKey=$SONAR_PROJECT
        sonar.organization=$SONAR_ORG
        sonar.sources=src
        sonar.tests=src
        sonar.test.inclusions=**/*.test.js,**/*.test.ts,**/*.test.tsx,**/*.spec.js,**/*.spec.ts,**/*.spec.tsx
        sonar.javascript.lcov.reportPaths=coverage/lcov.info
        sonar.typescript.lcov.reportPaths=coverage/lcov.info
        sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/coverage/**
        EOF
        fi
        
        sonar-scanner \
          -Dsonar.projectKey=$SONAR_PROJECT \
          -Dsonar.organization=$SONAR_ORG \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$SONAR_TOKEN

    - name: SonarCloud Quality Gate Check
      shell: bash
      env:
        SONAR_TOKEN: ${{ inputs.sonar-token }}
      run: |
        # Wait for SonarCloud to process the analysis
        sleep 30
        
        SONAR_ORG="${{ inputs.sonar-organization }}"
        SONAR_PROJECT="${{ inputs.sonar-project-key }}"
        
        if [ -z "$SONAR_ORG" ]; then
          SONAR_ORG=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        fi
        
        if [ -z "$SONAR_PROJECT" ]; then
          SONAR_PROJECT=$(echo $GITHUB_REPOSITORY | tr '/' '_')
        fi
        
        # Check quality gate status
        QUALITY_GATE=$(curl -s -u $SONAR_TOKEN: \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$SONAR_PROJECT" \
          | jq -r '.projectStatus.status')
        
        echo "Quality Gate Status: $QUALITY_GATE"
        
        if [ "$QUALITY_GATE" != "OK" ] && [ "${{ inputs.fail-on-quality-gate }}" = "true" ]; then
          echo "‚ùå SonarCloud Quality Gate failed"
          exit 1
        else
          echo "‚úÖ SonarCloud Quality Gate passed"
        fi

    - name: Install Checkmarx CLI
      shell: bash
      run: |
        # Download and install Checkmarx CLI
        curl -L -o checkmarx-cli.tar.gz "https://github.com/Checkmarx/ast-cli/releases/latest/download/ast-cli_linux_x64.tar.gz"
        tar -xzf checkmarx-cli.tar.gz
        chmod +x cx
        sudo mv cx /usr/local/bin/

    - name: Run Checkmarx Scan
      shell: bash
      env:
        CX_CLIENT_ID: ${{ inputs.checkmarx-client }}
        CX_CLIENT_SECRET: ${{ inputs.checkmarx-secret }}
        CX_SERVER: ${{ inputs.checkmarx-server }}
      run: |
        # Set project name
        PROJECT_NAME="${{ inputs.checkmarx-project-name }}"
        if [ -z "$PROJECT_NAME" ]; then
          PROJECT_NAME=$(echo $GITHUB_REPOSITORY | tr '/' '_')
        fi
        
        # Authenticate with Checkmarx using client credentials
        cx auth --client-id $CX_CLIENT_ID --client-secret $CX_CLIENT_SECRET --server $CX_SERVER
        
        # Run scan
        cx scan create --project-name "$PROJECT_NAME" --source-dir . --format json --output-path checkmarx-results.json
        
        # Check results
        if [ -f checkmarx-results.json ]; then
          HIGH_VULNS=$(jq '.results[] | select(.severity == "HIGH") | length' checkmarx-results.json 2>/dev/null || echo "0")
          CRITICAL_VULNS=$(jq '.results[] | select(.severity == "CRITICAL") | length' checkmarx-results.json 2>/dev/null || echo "0")
          
          echo "Checkmarx Scan Results:"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found"
            exit 1
          elif [ "$HIGH_VULNS" -gt 10 ]; then
            echo "‚ö†Ô∏è  High number of high-severity vulnerabilities found"
            exit 1
          else
            echo "‚úÖ Checkmarx scan passed"
          fi
        else
          echo "‚ö†Ô∏è  Checkmarx results file not found"
        fi

    - name: Upload Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          checkmarx-results.json
          .scannerwork/
        retention-days: 30

    - name: Comment PR with Security Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          
          let comment = '## üîí Security Scan Results\n\n';
          
          // Add SonarCloud results
          comment += '### SonarCloud Analysis\n';
          comment += '- ‚úÖ Code quality analysis completed\n';
          comment += '- üìä [View detailed results on SonarCloud](https://sonarcloud.io/dashboard?id=' + 
                     process.env.GITHUB_REPOSITORY.replace('/', '_') + ')\n\n';
          
          // Add Checkmarx results if available
          if (fs.existsSync('checkmarx-results.json')) {
            comment += '### Checkmarx Security Scan\n';
            comment += '- ‚úÖ Security vulnerability scan completed\n';
            comment += '- üîç Check the Actions tab for detailed results\n\n';
          }
          
          comment += '---\n*Security scans are required to pass before merging*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });