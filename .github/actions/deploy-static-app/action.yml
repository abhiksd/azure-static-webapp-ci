name: 'Deploy to Azure Static Web Apps'
description: 'Deploy Node.js application to Azure Static Web Apps with multi-environment support'

inputs:
  azure-static-web-apps-api-token:
    description: 'Azure Static Web Apps API token'
    required: true
  environment:
    description: 'Deployment environment (development, staging, production)'
    required: true
  version:
    description: 'Version tag or SHA for deployment'
    required: true
  app-location:
    description: 'App source code location'
    required: false
    default: '/'
  api-location:
    description: 'API source code location'
    required: false
    default: ''
  output-location:
    description: 'Built app content directory'
    required: false
    default: 'build'
  build-command:
    description: 'Custom build command'
    required: false
    default: 'npm run build'
  install-command:
    description: 'Custom install command'
    required: false
    default: 'npm ci'
  skip-build:
    description: 'Skip build step'
    required: false
    default: 'false'
  deployment-method:
    description: 'Deployment method (upload, githubAction)'
    required: false
    default: 'githubAction'

outputs:
  static-web-app-url:
    description: 'URL of the deployed static web app'
    value: ${{ steps.deploy.outputs.static_web_app_url }}
  deployment-id:
    description: 'Deployment ID'
    value: ${{ steps.deploy.outputs.deployment_id }}

runs:
  using: 'composite'
  steps:
    - name: Validate Environment
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        
        echo "Deploying to environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        
        # Validate environment
        if [[ ! "$ENVIRONMENT" =~ ^(development|staging|production)$ ]]; then
          echo "Invalid environment: $ENVIRONMENT"
          echo "Valid environments: development, staging, production"
          exit 1
        fi
        
        # Validate version format
        if [ -z "$VERSION" ]; then
          echo "Version is required"
          exit 1
        fi
        
        echo "Environment validation passed"

    - name: Setup Environment Variables
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        
        # Set environment-specific variables
        case $ENVIRONMENT in
          development)
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "REACT_APP_ENV=development" >> $GITHUB_ENV
            echo "VITE_ENV=development" >> $GITHUB_ENV
            ;;
          staging)
            echo "NODE_ENV=staging" >> $GITHUB_ENV
            echo "REACT_APP_ENV=staging" >> $GITHUB_ENV
            echo "VITE_ENV=staging" >> $GITHUB_ENV
            ;;
          production)
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "REACT_APP_ENV=production" >> $GITHUB_ENV
            echo "VITE_ENV=production" >> $GITHUB_ENV
            ;;
        esac
        
        # Set version info
        echo "REACT_APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "VITE_APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        
        echo "Environment variables set for $ENVIRONMENT"

    - name: Build Application
      if: inputs.skip-build != 'true'
      shell: bash
      run: |
        echo " Building application..."
        
        # Install dependencies
        INSTALL_CMD="${{ inputs.install-command }}"
        echo "Installing dependencies: $INSTALL_CMD"
        eval $INSTALL_CMD
        
        # Build application
        BUILD_CMD="${{ inputs.build-command }}"
        echo "Building application: $BUILD_CMD"
        eval $BUILD_CMD
        
        # Verify build output
        OUTPUT_DIR="${{ inputs.output-location }}"
        if [ -d "$OUTPUT_DIR" ]; then
          echo "Build completed successfully"
          echo "Build output location: $OUTPUT_DIR"
          echo "Build contents:"
          ls -la $OUTPUT_DIR
        else
          echo "Build output directory not found: $OUTPUT_DIR"
          exit 1
        fi

    - name: Create Deployment Configuration
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Create staticwebapp.config.json if it doesn't exist
        if [ ! -f staticwebapp.config.json ]; then
          cat > staticwebapp.config.json << EOF
        {
          "routes": [
            {
              "route": "/api/*",
              "allowedRoles": ["authenticated"]
            },
            {
              "route": "/*",
              "serve": "/index.html",
              "statusCode": 200
            }
          ],
          "responseOverrides": {
            "400": {
              "rewrite": "/custom-400.html",
              "statusCode": 400
            },
            "401": {
              "rewrite": "/login",
              "statusCode": 302
            },
            "403": {
              "rewrite": "/custom-403.html",
              "statusCode": 403
            },
            "404": {
              "rewrite": "/custom-404.html",
              "statusCode": 404
            }
          },
          "globalHeaders": {
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "X-XSS-Protection": "1; mode=block",
            "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
            "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
          },
          "mimeTypes": {
            ".json": "application/json",
            ".js": "application/javascript",
            ".css": "text/css"
          },
          "platform": {
            "apiRuntime": "node:18"
          }
        }
        EOF
          echo "Created staticwebapp.config.json"
        fi
        
        # Create environment-specific config
        cat > deployment-config.json << EOF
        {
          "environment": "$ENVIRONMENT",
          "version": "${{ inputs.version }}",
          "deploymentTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "buildInfo": {
            "nodeVersion": "$(node --version)",
            "npmVersion": "$(npm --version)"
          }
        }
        EOF
        
        echo "Created deployment configuration"

    - name: Deploy to Azure Static Web Apps
      id: deploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ inputs.azure-static-web-apps-api-token }}
        repo_token: ${{ github.token }}
        action: 'upload'
        app_location: ${{ inputs.app-location }}
        api_location: ${{ inputs.api-location }}
        output_location: ${{ inputs.output-location }}
        skip_build: ${{ inputs.skip-build }}

    - name: Get Deployment URL
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Extract deployment URL from the previous step
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "Deployment successful!"
          echo "Application URL: $DEPLOYMENT_URL"
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        else
          echo " Deployment URL not available"
        fi

    - name: Health Check
      shell: bash
      run: |
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "Running health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if the app is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "Health check passed - Application is accessible"
          else
            echo " Health check warning - HTTP status: $HTTP_STATUS"
            echo "This might be expected for SPAs that return 200 for all routes"
          fi
          
          # Check if common static assets are available
          ASSETS_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/static/css/" || echo "000")
          if [ "$ASSETS_CHECK" = "200" ] || [ "$ASSETS_CHECK" = "403" ]; then
            echo "Static assets check passed"
          else
            echo " Static assets check: $ASSETS_CHECK"
          fi
        else
          echo " Skipping health check - deployment URL not available"
        fi

    - name: Update Deployment Status
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        echo "Deployment Summary:"
        echo "Environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "URL: $DEPLOYMENT_URL"
        echo "Status:  Deployed"
        
        # Create deployment summary
        cat > deployment-summary.json << EOF
        {
          "environment": "$ENVIRONMENT",
          "version": "$VERSION",
          "url": "$DEPLOYMENT_URL",
          "status": "deployed",
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "workflow": "$GITHUB_WORKFLOW",
          "runId": "$GITHUB_RUN_ID"
        }
        EOF
        
        echo "Deployment summary created"

    - name: Notify Deployment
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        echo "Deployment notification:"
        echo "Successfully deployed to $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "URL: $DEPLOYMENT_URL"
        echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-artifacts-${{ inputs.environment }}
        path: |
          deployment-summary.json
          deployment-config.json
          staticwebapp.config.json
          build/
        retention-days: 30