name: 'Deploy to Azure Static Web Apps'
description: 'Deploy Node.js application to Azure Static Web Apps with multi-environment support. Optimized to use pre-built artifacts when skip-build is enabled.'

inputs:
  azure-static-web-apps-api-token:
    description: 'Azure Static Web Apps API token'
    required: true
  environment:
    description: 'Deployment environment (development, staging, production)'
    required: true
  version:
    description: 'Version tag or SHA for deployment'
    required: true
  app-location:
    description: 'App source code location'
    required: false
    default: '/'
  api-location:
    description: 'API source code location'
    required: false
    default: ''
  output-location:
    description: 'Built app content directory'
    required: false
    default: 'build'
  build-command:
    description: 'Custom build command'
    required: false
    default: 'npm run build'
  install-command:
    description: 'Custom install command'
    required: false
    default: 'npm ci'
  skip-build:
    description: 'Skip build step'
    required: false
    default: 'false'
  deployment-method:
    description: 'Deployment method (upload, githubAction)'
    required: false
    default: 'githubAction'

outputs:
  static-web-app-url:
    description: 'URL of the deployed static web app'
    value: ${{ steps.deploy.outputs.static_web_app_url }}
  deployment-id:
    description: 'Deployment ID'
    value: ${{ steps.deploy.outputs.deployment_id }}

runs:
  using: 'composite'
  steps:
    - name: Validate Environment
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        
        echo "Deploying to environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        
        # Validate environment
        if [[ ! "$ENVIRONMENT" =~ ^(development|staging|production)$ ]]; then
          echo "Invalid environment: $ENVIRONMENT"
          echo "Valid environments: development, staging, production"
          exit 1
        fi
        
        # Validate version format
        if [ -z "$VERSION" ]; then
          echo "Version is required"
          exit 1
        fi
        
        echo "Environment validation passed"

    - name: Setup Environment Variables
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        
        # Set environment-specific variables
        case $ENVIRONMENT in
          development)
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "REACT_APP_ENV=development" >> $GITHUB_ENV
            echo "VITE_ENV=development" >> $GITHUB_ENV
            ;;
          staging)
            echo "NODE_ENV=staging" >> $GITHUB_ENV
            echo "REACT_APP_ENV=staging" >> $GITHUB_ENV
            echo "VITE_ENV=staging" >> $GITHUB_ENV
            ;;
          production)
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "REACT_APP_ENV=production" >> $GITHUB_ENV
            echo "VITE_ENV=production" >> $GITHUB_ENV
            ;;
        esac
        
        # Set version info
        echo "REACT_APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "VITE_APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        
        echo "Environment variables set for $ENVIRONMENT"

    - name: Verify Build Artifacts
      shell: bash
      run: |
        OUTPUT_DIR="${{ inputs.output-location }}"
        
        if [ "${{ inputs.skip-build }}" = "true" ]; then
          echo "Build step skipped - using pre-built artifacts"
          echo "Verifying build artifacts in: $OUTPUT_DIR"
          
          if [ -d "$OUTPUT_DIR" ]; then
            echo "Build artifacts found successfully"
            echo "Build contents:"
            ls -la $OUTPUT_DIR
          else
            echo "ERROR: Build artifacts not found in: $OUTPUT_DIR"
            echo "This usually means the build artifacts were not properly uploaded/downloaded"
            exit 1
          fi
        else
          echo "Building application..."
          
          # Install dependencies
          INSTALL_CMD="${{ inputs.install-command }}"
          echo "Installing dependencies: $INSTALL_CMD"
          eval $INSTALL_CMD
          
          # Build application
          BUILD_CMD="${{ inputs.build-command }}"
          echo "Building application: $BUILD_CMD"
          eval $BUILD_CMD
          
          # Verify build output
          if [ -d "$OUTPUT_DIR" ]; then
            echo "Build completed successfully"
            echo "Build output location: $OUTPUT_DIR"
            echo "Build contents:"
            ls -la $OUTPUT_DIR
          else
            echo "Build output directory not found: $OUTPUT_DIR"
            exit 1
          fi
        fi

    - name: Create Deployment Configuration
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Create environment-specific deployment config
        cat > deployment-config.json << EOF
        {
          "environment": "$ENVIRONMENT",
          "version": "${{ inputs.version }}",
          "deploymentTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "buildInfo": {
            "nodeVersion": "$(node --version)",
            "npmVersion": "$(npm --version)"
          }
        }
        EOF
        
        echo "Created deployment configuration"

    - name: Pre-deployment Cleanup
      shell: bash
      run: |
        echo "Cleaning up any existing deployment artifacts..."
        
        # Remove any existing deployment artifacts that might have permission issues
        sudo rm -rf .azure 2>/dev/null || true
        sudo rm -rf deployment-*.json 2>/dev/null || true
        sudo rm -rf oryx-manifest.toml 2>/dev/null || true
        
        # Fix permissions for existing files before deployment
        sudo chown -R $USER:$USER . 2>/dev/null || true
        chmod -R u+rwX . 2>/dev/null || true
        
        echo "Pre-deployment cleanup completed"

    - name: Deploy to Azure Static Web Apps
      id: deploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ inputs.azure-static-web-apps-api-token }}
        repo_token: ${{ github.token }}
        action: 'upload'
        app_location: ${{ inputs.app-location }}
        api_location: ${{ inputs.api-location }}
        output_location: ${{ inputs.output-location }}
        skip_build: ${{ inputs.skip-build }}

    - name: Fix File Permissions
      if: always()
      shell: bash
      run: |
        echo "Fixing file permissions after Azure deployment..."
        
        # Fix permissions for all files in workspace that might have been created by Docker
        # The Azure action runs in Docker as root, so we need to reclaim ownership
        
        # Change ownership of all files back to the runner user
        sudo chown -R $USER:$USER . 2>/dev/null || true
        
        # Ensure proper permissions for common directories
        chmod -R u+rwX . 2>/dev/null || true
        
        # Specifically fix build output directory if it exists
        if [ -d "${{ inputs.output-location }}" ]; then
          sudo chown -R $USER:$USER ${{ inputs.output-location }} 2>/dev/null || true
          chmod -R u+rwX ${{ inputs.output-location }} 2>/dev/null || true
        fi
        
        # Fix any hidden directories that might have been created
        find . -type d -name ".*" -exec sudo chown -R $USER:$USER {} \; 2>/dev/null || true
        find . -type d -name ".*" -exec chmod -R u+rwX {} \; 2>/dev/null || true
        
        echo "File permissions fixed"

    - name: Get Deployment URL
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Extract deployment URL from the previous step
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "Deployment successful!"
          echo "Application URL: $DEPLOYMENT_URL"
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        else
          echo " Deployment URL not available"
        fi

    - name: Health Check
      shell: bash
      run: |
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "Running health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if the app is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "Health check passed - Application is accessible"
          else
            echo " Health check warning - HTTP status: $HTTP_STATUS"
            echo "This might be expected for SPAs that return 200 for all routes"
          fi
          
          # Check if common static assets are available
          ASSETS_CHECK=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/static/css/" || echo "000")
          if [ "$ASSETS_CHECK" = "200" ] || [ "$ASSETS_CHECK" = "403" ]; then
            echo "Static assets check passed"
          else
            echo " Static assets check: $ASSETS_CHECK"
          fi
        else
          echo " Skipping health check - deployment URL not available"
        fi

    - name: Update Deployment Status
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        echo "Deployment Summary:"
        echo "Environment: $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "URL: $DEPLOYMENT_URL"
        echo "Status:  Deployed"
        
        # Create deployment summary
        cat > deployment-summary.json << EOF
        {
          "environment": "$ENVIRONMENT",
          "version": "$VERSION",
          "url": "$DEPLOYMENT_URL",
          "status": "deployed",
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "workflow": "$GITHUB_WORKFLOW",
          "runId": "$GITHUB_RUN_ID"
        }
        EOF
        
        echo "Deployment summary created"

    - name: Notify Deployment
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        VERSION="${{ inputs.version }}"
        DEPLOYMENT_URL="${{ steps.deploy.outputs.static_web_app_url }}"
        
        echo "Deployment notification:"
        echo "Successfully deployed to $ENVIRONMENT"
        echo "Version: $VERSION"
        echo "URL: $DEPLOYMENT_URL"
        echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

    - name: Final Cleanup
      if: always()
      shell: bash
      run: |
        echo "Performing final cleanup to prevent permission issues..."
        
        # Ensure all files are owned by runner user for next workflow runs
        sudo chown -R $USER:$USER . 2>/dev/null || true
        
        # Set proper permissions
        chmod -R u+rwX . 2>/dev/null || true
        
        # Clean up any Docker-created temporary files
        sudo rm -rf /tmp/.oryx* 2>/dev/null || true
        sudo rm -rf .dockerenv 2>/dev/null || true
        
        # Remove any Azure-specific temporary files that might cause issues
        sudo rm -rf .azure 2>/dev/null || true
        sudo rm -rf oryx-manifest.toml 2>/dev/null || true
        
        echo "Final cleanup completed - workspace ready for next run"