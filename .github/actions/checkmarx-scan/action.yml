name: 'Checkmarx Security Scan'
description: 'Run Checkmarx AST security scan with vulnerability thresholds'

inputs:
  base-uri:
    description: 'Checkmarx AST base URI'
    required: false
    default: 'https://ast.checkmarx.net'
  checkmarx-client-id:
    description: 'Checkmarx client ID'
    required: true
  checkmarx-secret:
    description: 'Checkmarx client secret'
    required: true
  tenant:
    description: 'Checkmarx tenant'
    required: true
  enabled:
    description: 'Enable Checkmarx scan'
    required: false
    default: 'true'
  scan-types:
    description: 'Comma-separated scan types'
    required: false
    default: 'sast,sca'
  preset:
    description: 'SAST scan preset'
    required: false
    default: 'Checkmarx Default'
  max-critical:
    description: 'Maximum critical vulnerabilities'
    required: false
    default: '0'
  max-high:
    description: 'Maximum high vulnerabilities'
    required: false
    default: '5'
  app-location:
    description: 'Application source code location relative to repository root'
    required: false
    default: '/'

outputs:
  status:
    description: 'Scan status'
    value: ${{ steps.results.outputs.status }}
  critical-count:
    description: 'Critical vulnerabilities count'
    value: ${{ steps.results.outputs.critical-count }}
  high-count:
    description: 'High vulnerabilities count'
    value: ${{ steps.results.outputs.high-count }}

runs:
  using: 'composite'
  steps:
    - name: Change to App Directory
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        echo "Changing to app directory: ${{ inputs.app-location }}"
        cd "${{ inputs.app-location }}"
        pwd
        echo "Scanning files in:"
        ls -la

    - name: Run Checkmarx AST
      if: inputs.enabled == 'true'
      uses: checkmarx/ast-github-action@86e9ae570a811f9a1fb85903647a307aa3bf6253
      with:
        project_name: ${{ github.repository }}
        cx_tenant: ${{ inputs.tenant }}
        base_uri: ${{ inputs.base-uri }}
        cx_client_id: ${{ inputs.checkmarx-client-id }}
        cx_client_secret: ${{ inputs.checkmarx-secret }}
        additional_params: --scan-types ${{ inputs.scan-types }} --report-format sarif --output-path . --sast-preset-name "${{ inputs.preset }}" --project-dir "${{ inputs.app-location }}"

    - name: Get Results
      id: results
      if: inputs.enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.app-location }}
      run: |
        echo "Looking for SARIF results in: ${{ inputs.app-location }}"
        pwd
        
        CRITICAL=0
        HIGH=0
        
        # Parse SARIF results
        for file in $(find . -name "*.sarif" 2>/dev/null | head -3); do
          if [[ -f "$file" ]] && command -v jq >/dev/null 2>&1; then
            CRITICAL=$((CRITICAL + $(jq -r '[.runs[]?.results[]? | select(.level=="error")] | length' "$file" 2>/dev/null || echo "0")))
            HIGH=$((HIGH + $(jq -r '[.runs[]?.results[]? | select(.level=="warning")] | length' "$file" 2>/dev/null || echo "0")))
          fi
        done
        
        # Check thresholds
        STATUS="PASSED"
        [[ "$CRITICAL" -gt "${{ inputs.max-critical }}" ]] && STATUS="FAILED"
        [[ "$HIGH" -gt "${{ inputs.max-high }}" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "critical-count=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH" >> $GITHUB_OUTPUT
                  echo "Checkmarx: $STATUS | Vulnerabilities: $CRITICAL critical, $HIGH high"

          - name: Skip (Disabled)
        if: inputs.enabled != 'true'
        shell: bash
        run: echo "Checkmarx scan disabled"