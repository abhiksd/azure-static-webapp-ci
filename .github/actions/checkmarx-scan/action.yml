name: 'Checkmarx Security Scan'
description: 'Comprehensive Checkmarx security scanning with configurable vulnerability thresholds'

inputs:
  enabled:
    description: 'Enable Checkmarx security scanning'
    required: false
    default: 'true'
  checkmarx-client:
    description: 'Checkmarx client ID'
    required: true
  checkmarx-secret:
    description: 'Checkmarx client secret'
    required: true
  checkmarx-server:
    description: 'Checkmarx server URL'
    required: false
    default: 'https://checkmarx.company.com'
  scan-types:
    description: 'Scan types (comma-separated: sca,sast,kics)'
    required: false
    default: 'sca,sast,kics'
  max-critical-vulnerabilities:
    description: 'Maximum critical vulnerabilities allowed'
    required: false
    default: '0'
  max-high-vulnerabilities:
    description: 'Maximum high vulnerabilities allowed'
    required: false
    default: '2'
  max-medium-vulnerabilities:
    description: 'Maximum medium vulnerabilities allowed'
    required: false
    default: '10'
  max-sca-critical:
    description: 'Maximum SCA critical vulnerabilities'
    required: false
    default: '0'
  max-sca-high:
    description: 'Maximum SCA high vulnerabilities'
    required: false
    default: '2'
  max-kics-high:
    description: 'Maximum KICS high issues'
    required: false
    default: '0'
  preset:
    description: 'Checkmarx scan preset'
    required: false
    default: 'Checkmarx Default'
  incremental:
    description: 'Enable incremental scanning'
    required: false
    default: 'true'
  exclude-folders:
    description: 'Folders to exclude from scanning'
    required: false
    default: 'node_modules,dist,build,coverage'
  exclude-files:
    description: 'Files to exclude from scanning'
    required: false
    default: '*.min.js,*.bundle.js'
  fail-on-threshold:
    description: 'Fail the action if vulnerability thresholds are exceeded'
    required: false
    default: 'true'
  project-name:
    description: 'Checkmarx project name (auto-detected if not provided)'
    required: false
  team:
    description: 'Checkmarx team path'
    required: false
    default: '/CxServer/SP/Company'

outputs:
  scan-status:
    description: 'Overall scan status (PASSED/FAILED/SKIPPED)'
    value: ${{ steps.final-status.outputs.status }}
  critical-count:
    description: 'Number of critical vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.critical-count }}
  high-count:
    description: 'Number of high vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.high-count }}
  medium-count:
    description: 'Number of medium vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.medium-count }}
  sca-critical:
    description: 'Number of SCA critical vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-critical }}
  sca-high:
    description: 'Number of SCA high vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-high }}
  kics-high:
    description: 'Number of KICS high issues'
    value: ${{ steps.evaluate-results.outputs.kics-high }}
  threshold-passed:
    description: 'Whether vulnerability thresholds were met (true/false)'
    value: ${{ steps.evaluate-results.outputs.threshold-passed }}

runs:
  using: 'composite'
  steps:
    - name: Check if Checkmarx is enabled
      shell: bash
      run: |
        if [[ "${{ inputs.enabled }}" != "true" ]]; then
          echo "🔇 Checkmarx security scanning is disabled"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        elif [[ "${{ inputs.checkmarx-client }}" == "" ]] || [[ "${{ inputs.checkmarx-secret }}" == "" ]]; then
          echo "⚠️ Checkmarx credentials not provided - skipping scan"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        else
          echo "✅ Checkmarx security scanning enabled"
          echo "CHECKMARX_ENABLED=true" >> $GITHUB_ENV
        fi

    - name: Setup Checkmarx Configuration
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "🔧 Setting up Checkmarx security scan configuration..."
        echo ""
        echo "📋 Scan Configuration:"
        echo "  🏭 Server: ${{ inputs.checkmarx-server }}"
        echo "  📦 Project: ${{ inputs.project-name || github.repository }}"
        echo "  👥 Team: ${{ inputs.team }}"
        echo "  🔍 Scan Types: ${{ inputs.scan-types }}"
        echo "  🎛️ Preset: ${{ inputs.preset }}"
        echo "  📈 Incremental: ${{ inputs.incremental }}"
        echo ""
        echo "🛡️ Vulnerability Thresholds:"
        echo "  🚨 Critical (SAST): ≤ ${{ inputs.max-critical-vulnerabilities }}"
        echo "  ⚠️ High (SAST): ≤ ${{ inputs.max-high-vulnerabilities }}"
        echo "  🔶 Medium (SAST): ≤ ${{ inputs.max-medium-vulnerabilities }}"
        echo "  🚨 SCA Critical: ≤ ${{ inputs.max-sca-critical }}"
        echo "  ⚠️ SCA High: ≤ ${{ inputs.max-sca-high }}"
        echo "  🏗️ KICS High: ≤ ${{ inputs.max-kics-high }}"
        echo ""
        echo "📁 Exclusions:"
        echo "  📂 Folders: ${{ inputs.exclude-folders }}"
        echo "  📄 Files: ${{ inputs.exclude-files }}"

    - name: Run Checkmarx Security Scan
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "🔒 Running Checkmarx Security Scan..."
        echo "Scan Types: ${{ inputs.scan-types }}"
        
        # In a real implementation, this would use the actual Checkmarx CxFlow action
        # For demonstration, we'll simulate the scan process
        
        echo "🔄 Initializing Checkmarx scan..."
        echo "  - Connecting to ${{ inputs.checkmarx-server }}"
        echo "  - Authenticating with client credentials"
        echo "  - Creating/updating project: ${{ inputs.project-name || github.repository }}"
        echo "  - Setting up scan parameters"
        
        # Simulate scan execution
        sleep 2
        
        echo "🔍 Executing security scans..."
        IFS=',' read -ra SCAN_TYPES <<< "${{ inputs.scan-types }}"
        for scan_type in "${SCAN_TYPES[@]}"; do
          case "$scan_type" in
            "sast")
              echo "  ✅ SAST (Static Application Security Testing) - Completed"
              ;;
            "sca")
              echo "  ✅ SCA (Software Composition Analysis) - Completed"
              ;;
            "kics")
              echo "  ✅ KICS (Infrastructure as Code Security) - Completed"
              ;;
            *)
              echo "  ⚠️ Unknown scan type: $scan_type"
              ;;
          esac
        done
        
        echo "✅ Checkmarx security scan execution completed"

        # Here you would use the actual Checkmarx action:
        # uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.6
        # with:
        #   project: ${{ inputs.project-name || github.repository }}
        #   team: ${{ inputs.team }}
        #   checkmarx_url: ${{ inputs.checkmarx-server }}
        #   checkmarx_client: ${{ inputs.checkmarx-client }}
        #   checkmarx_secret: ${{ inputs.checkmarx-secret }}
        #   scanners: ${{ inputs.scan-types }}
        #   params: |
        #     --preset="${{ inputs.preset }}"
        #     --incremental=${{ inputs.incremental }}
        #     --exclude-folders="${{ inputs.exclude-folders }}"
        #     --exclude-files="${{ inputs.exclude-files }}"

    - name: Evaluate Scan Results
      id: evaluate-results
      shell: bash
      run: |
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "critical-count=0" >> $GITHUB_OUTPUT
          echo "high-count=0" >> $GITHUB_OUTPUT
          echo "medium-count=0" >> $GITHUB_OUTPUT
          echo "sca-critical=0" >> $GITHUB_OUTPUT
          echo "sca-high=0" >> $GITHUB_OUTPUT
          echo "kics-high=0" >> $GITHUB_OUTPUT
          echo "threshold-passed=true" >> $GITHUB_OUTPUT
          echo "🔇 Checkmarx scan was skipped"
          exit 0
        fi
        
        echo "📊 Evaluating Checkmarx Security Scan Results..."
        
        # In a real implementation, these would come from Checkmarx scan results
        # For demonstration, using simulated values based on scan types
        CRITICAL_VULNS=0
        HIGH_VULNS=1
        MEDIUM_VULNS=3
        SCA_CRITICAL=0
        SCA_HIGH=1
        KICS_HIGH=0
        
        # Adjust values based on enabled scan types
        IFS=',' read -ra SCAN_TYPES <<< "${{ inputs.scan-types }}"
        SAST_ENABLED=false
        SCA_ENABLED=false
        KICS_ENABLED=false
        
        for scan_type in "${SCAN_TYPES[@]}"; do
          case "$scan_type" in
            "sast") SAST_ENABLED=true ;;
            "sca") SCA_ENABLED=true ;;
            "kics") KICS_ENABLED=true ;;
          esac
        done
        
        if [[ "$SAST_ENABLED" != "true" ]]; then
          CRITICAL_VULNS=0
          HIGH_VULNS=0
          MEDIUM_VULNS=0
        fi
        
        if [[ "$SCA_ENABLED" != "true" ]]; then
          SCA_CRITICAL=0
          SCA_HIGH=0
        fi
        
        if [[ "$KICS_ENABLED" != "true" ]]; then
          KICS_HIGH=0
        fi
        
        # Output results
        echo "critical-count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH_VULNS" >> $GITHUB_OUTPUT
        echo "medium-count=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
        echo "sca-critical=$SCA_CRITICAL" >> $GITHUB_OUTPUT
        echo "sca-high=$SCA_HIGH" >> $GITHUB_OUTPUT
        echo "kics-high=$KICS_HIGH" >> $GITHUB_OUTPUT
        
        # Threshold evaluation
        THRESHOLD_PASSED=true
        FAILED_CHECKS=()
        
        # SAST vulnerability checks
        if [[ "$SAST_ENABLED" == "true" ]]; then
          if [[ "$CRITICAL_VULNS" -gt "${{ inputs.max-critical-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Critical: $CRITICAL_VULNS > ${{ inputs.max-critical-vulnerabilities }}")
          fi
          
          if [[ "$HIGH_VULNS" -gt "${{ inputs.max-high-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST High: $HIGH_VULNS > ${{ inputs.max-high-vulnerabilities }}")
          fi
          
          if [[ "$MEDIUM_VULNS" -gt "${{ inputs.max-medium-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Medium: $MEDIUM_VULNS > ${{ inputs.max-medium-vulnerabilities }}")
          fi
        fi
        
        # SCA vulnerability checks
        if [[ "$SCA_ENABLED" == "true" ]]; then
          if [[ "$SCA_CRITICAL" -gt "${{ inputs.max-sca-critical }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA Critical: $SCA_CRITICAL > ${{ inputs.max-sca-critical }}")
          fi
          
          if [[ "$SCA_HIGH" -gt "${{ inputs.max-sca-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA High: $SCA_HIGH > ${{ inputs.max-sca-high }}")
          fi
        fi
        
        # KICS checks
        if [[ "$KICS_ENABLED" == "true" ]]; then
          if [[ "$KICS_HIGH" -gt "${{ inputs.max-kics-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("KICS High: $KICS_HIGH > ${{ inputs.max-kics-high }}")
          fi
        fi
        
        echo "threshold-passed=$THRESHOLD_PASSED" >> $GITHUB_OUTPUT
        
        # Display results
        echo ""
        echo "📊 Checkmarx Security Scan Results:"
        echo "==================================="
        echo "🎯 Scan Types: ${{ inputs.scan-types }}"
        echo ""
        
        if [[ "$SAST_ENABLED" == "true" ]]; then
          echo "🔍 SAST Results:"
          echo "  🚨 Critical: $CRITICAL_VULNS (max: ${{ inputs.max-critical-vulnerabilities }})"
          echo "  ⚠️ High: $HIGH_VULNS (max: ${{ inputs.max-high-vulnerabilities }})"
          echo "  🔶 Medium: $MEDIUM_VULNS (max: ${{ inputs.max-medium-vulnerabilities }})"
        fi
        
        if [[ "$SCA_ENABLED" == "true" ]]; then
          echo "📦 SCA Results:"
          echo "  🚨 Critical: $SCA_CRITICAL (max: ${{ inputs.max-sca-critical }})"
          echo "  ⚠️ High: $SCA_HIGH (max: ${{ inputs.max-sca-high }})"
        fi
        
        if [[ "$KICS_ENABLED" == "true" ]]; then
          echo "🏗️ KICS Results:"
          echo "  ⚠️ High: $KICS_HIGH (max: ${{ inputs.max-kics-high }})"
        fi
        
        echo ""
        if [[ "$THRESHOLD_PASSED" == "true" ]]; then
          echo "✅ All vulnerability thresholds passed!"
        else
          echo "❌ Vulnerability threshold violations:"
          for check in "${FAILED_CHECKS[@]}"; do
            echo "  - $check"
          done
        fi

    - name: Security Gate Enforcement
      id: final-status
      shell: bash
      run: |
        THRESHOLD_PASSED="${{ steps.evaluate-results.outputs.threshold-passed }}"
        
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "status=SKIPPED" >> $GITHUB_OUTPUT
          echo "🔇 Checkmarx security scan was skipped"
        elif [[ "$THRESHOLD_PASSED" != "true" ]] && [[ "${{ inputs.fail-on-threshold }}" == "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "❌ Checkmarx security gate failed - vulnerability thresholds exceeded"
          exit 1
        elif [[ "$THRESHOLD_PASSED" != "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "⚠️ Checkmarx security gate failed - continuing (fail-on-threshold=false)"
        else
          echo "status=PASSED" >> $GITHUB_OUTPUT
          echo "✅ Checkmarx security gate passed - all thresholds met"
        fi