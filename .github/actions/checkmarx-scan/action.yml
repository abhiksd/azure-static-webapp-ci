name: 'Checkmarx Security Scan'
description: 'Comprehensive Checkmarx security scanning with configurable vulnerability thresholds'

inputs:
  enabled:
    description: 'Enable Checkmarx security scanning'
    required: false
    default: 'true'
  checkmarx-client:
    description: 'Checkmarx client ID'
    required: true
  checkmarx-secret:
    description: 'Checkmarx client secret'
    required: true
  checkmarx-server:
    description: 'Checkmarx server URL'
    required: false
    default: 'https://checkmarx.company.com'
  scan-types:
    description: 'Scan types (comma-separated: sca,sast,kics)'
    required: false
    default: 'sca,sast,kics'
  max-critical-vulnerabilities:
    description: 'Maximum critical vulnerabilities allowed'
    required: false
    default: '0'
  max-high-vulnerabilities:
    description: 'Maximum high vulnerabilities allowed'
    required: false
    default: '2'
  max-medium-vulnerabilities:
    description: 'Maximum medium vulnerabilities allowed'
    required: false
    default: '10'
  max-sca-critical:
    description: 'Maximum SCA critical vulnerabilities'
    required: false
    default: '0'
  max-sca-high:
    description: 'Maximum SCA high vulnerabilities'
    required: false
    default: '2'
  max-kics-high:
    description: 'Maximum KICS high issues'
    required: false
    default: '0'
  preset:
    description: 'Checkmarx scan preset'
    required: false
    default: 'Checkmarx Default'
  incremental:
    description: 'Enable incremental scanning'
    required: false
    default: 'true'
  exclude-folders:
    description: 'Folders to exclude from scanning'
    required: false
    default: 'node_modules,dist,build,coverage'
  exclude-files:
    description: 'Files to exclude from scanning'
    required: false
    default: '*.min.js,*.bundle.js'
  fail-on-threshold:
    description: 'Fail the action if vulnerability thresholds are exceeded'
    required: false
    default: 'true'
  project-name:
    description: 'Checkmarx project name (auto-detected if not provided)'
    required: false
  team:
    description: 'Checkmarx team path'
    required: false
    default: '/CxServer/SP/Company'

outputs:
  scan-status:
    description: 'Overall scan status (PASSED/FAILED/SKIPPED)'
    value: ${{ steps.final-status.outputs.status }}
  critical-count:
    description: 'Number of critical vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.critical-count }}
  high-count:
    description: 'Number of high vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.high-count }}
  medium-count:
    description: 'Number of medium vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.medium-count }}
  low-count:
    description: 'Number of low vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.low-count }}
  sca-critical:
    description: 'Number of SCA critical vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-critical }}
  sca-high:
    description: 'Number of SCA high vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-high }}
  sca-medium:
    description: 'Number of SCA medium vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-medium }}
  kics-high:
    description: 'Number of KICS high issues'
    value: ${{ steps.evaluate-results.outputs.kics-high }}
  kics-medium:
    description: 'Number of KICS medium issues'
    value: ${{ steps.evaluate-results.outputs.kics-medium }}
  threshold-passed:
    description: 'Whether vulnerability thresholds were met (true/false)'
    value: ${{ steps.evaluate-results.outputs.threshold-passed }}
  scan-types-used:
    description: 'Scan types that were executed'
    value: ${{ steps.evaluate-results.outputs.scan-types-used }}

runs:
  using: 'composite'
  steps:
    - name: Check if Checkmarx is enabled
      shell: bash
      run: |
        if [[ "${{ inputs.enabled }}" != "true" ]]; then
          echo "üîá Checkmarx security scanning is disabled"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        elif [[ "${{ inputs.checkmarx-client }}" == "" ]] || [[ "${{ inputs.checkmarx-secret }}" == "" ]]; then
          echo "‚ö†Ô∏è Checkmarx credentials not provided - skipping scan"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        else
          echo "‚úÖ Checkmarx security scanning enabled"
          echo "CHECKMARX_ENABLED=true" >> $GITHUB_ENV
        fi

    - name: Setup Checkmarx Configuration
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "üîß Setting up Checkmarx security scan configuration..."
        echo ""
        echo "üìã Scan Configuration:"
        echo "  üè≠ Server: ${{ inputs.checkmarx-server }}"
        echo "  üì¶ Project: ${{ inputs.project-name || github.repository }}"
        echo "  üë• Team: ${{ inputs.team }}"
        echo "  üîç Scan Types: ${{ inputs.scan-types }}"
        echo "  üéõÔ∏è Preset: ${{ inputs.preset }}"
        echo "  üìà Incremental: ${{ inputs.incremental }}"
        echo ""
        echo "üõ°Ô∏è Vulnerability Thresholds:"
        echo "  üö® Critical (SAST): ‚â§ ${{ inputs.max-critical-vulnerabilities }}"
        echo "  ‚ö†Ô∏è High (SAST): ‚â§ ${{ inputs.max-high-vulnerabilities }}"
        echo "  üî∂ Medium (SAST): ‚â§ ${{ inputs.max-medium-vulnerabilities }}"
        echo "  üö® SCA Critical: ‚â§ ${{ inputs.max-sca-critical }}"
        echo "  ‚ö†Ô∏è SCA High: ‚â§ ${{ inputs.max-sca-high }}"
        echo "  üèóÔ∏è KICS High: ‚â§ ${{ inputs.max-kics-high }}"
        echo ""
        echo "üìÅ Exclusions:"
        echo "  üìÇ Folders: ${{ inputs.exclude-folders }}"
        echo "  üìÑ Files: ${{ inputs.exclude-files }}"

    - name: Run Checkmarx CxFlow Security Scan
      if: env.CHECKMARX_ENABLED == 'true'
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.6
      with:
        project: ${{ inputs.project-name || github.repository }}
        team: ${{ inputs.team }}
        checkmarx_url: ${{ inputs.checkmarx-server }}
        checkmarx_client: ${{ inputs.checkmarx-client }}
        checkmarx_secret: ${{ inputs.checkmarx-secret }}
        scanners: ${{ inputs.scan-types }}
        incremental: ${{ inputs.incremental }}
        preset: ${{ inputs.preset }}
        exclude_folders: ${{ inputs.exclude-folders }}
        exclude_files: ${{ inputs.exclude-files }}
        github_token: ${{ github.token }}
        bug_tracker: Sarif
        params: |
          --bug-tracker-impl=SARIF
          --cx-flow.bug-tracker-impl=SARIF
          --logging.level.com.checkmarx=DEBUG
          --checkmarx.version=9.0
          --checkmarx.scan-preset="${{ inputs.preset }}"
          --checkmarx.incremental=${{ inputs.incremental }}
          --checkmarx.exclude-folders="${{ inputs.exclude-folders }}"
          --checkmarx.exclude-files="${{ inputs.exclude-files }}"

    - name: Get Real-time Checkmarx Results from SARIF
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "üìä Processing Checkmarx SARIF results..."
        
        # Look for SARIF files generated by CxFlow
        SARIF_FILES=$(find . -name "*.sarif" -o -name "*checkmarx*.json" 2>/dev/null | head -5)
        
        if [[ -z "$SARIF_FILES" ]]; then
          echo "‚ö†Ô∏è No SARIF files found, checking GitHub Security tab results..."
          echo "  This might be normal if this is the first scan or no issues were found."
        else
          echo "üìÑ Found SARIF files:"
          for file in $SARIF_FILES; do
            echo "  - $file"
          done
        fi
        
        # Also try to get results from Checkmarx API directly
        echo ""
        echo "üîç Fetching results from Checkmarx server API..."

    - name: Get Real-time Checkmarx Results via API
      id: checkmarx-api
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "üîç Fetching real-time results from Checkmarx API..."
        
        PROJECT_NAME="${{ inputs.project-name || github.repository }}"
        CX_SERVER="${{ inputs.checkmarx-server }}"
        
        # Function to call Checkmarx API
        call_checkmarx_api() {
          local endpoint="$1"
          local method="${2:-GET}"
          local data="${3:-}"
          
          if [[ "$method" == "POST" ]]; then
            curl -s -X POST "$CX_SERVER/cxrestapi/$endpoint" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -d "$data"
          else
            curl -s -X GET "$CX_SERVER/cxrestapi/$endpoint" \
              -H "Authorization: Bearer $CX_TOKEN" \
              -H "Accept: application/json"
          fi
        }
        
        # Authenticate with Checkmarx
        echo "üîê Authenticating with Checkmarx..."
        AUTH_DATA='{"username":"${{ inputs.checkmarx-client }}","password":"${{ inputs.checkmarx-secret }}"}'
        AUTH_RESPONSE=$(call_checkmarx_api "auth/identity/connect/token" "POST" "grant_type=client_credentials&client_id=${{ inputs.checkmarx-client }}&client_secret=${{ inputs.checkmarx-secret }}")
        
        if [[ -n "$AUTH_RESPONSE" ]] && echo "$AUTH_RESPONSE" | jq -e '.access_token' > /dev/null 2>&1; then
          CX_TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.access_token')
          echo "‚úÖ Successfully authenticated with Checkmarx"
        else
          echo "‚ö†Ô∏è Authentication failed, will use SARIF results only"
          CX_TOKEN=""
        fi
        
        # Try to get project information
        if [[ -n "$CX_TOKEN" ]]; then
          echo "üîç Looking up project: $PROJECT_NAME"
          PROJECTS_RESPONSE=$(call_checkmarx_api "projects")
          
          if [[ -n "$PROJECTS_RESPONSE" ]]; then
            PROJECT_ID=$(echo "$PROJECTS_RESPONSE" | jq -r ".[] | select(.name==\"$PROJECT_NAME\") | .id // empty")
            
            if [[ -n "$PROJECT_ID" ]]; then
              echo "üìÅ Found project ID: $PROJECT_ID"
              
              # Get latest scan information
              echo "üîÑ Fetching latest scan results..."
              SCANS_RESPONSE=$(call_checkmarx_api "sast/scans?projectId=$PROJECT_ID&scanStatus=Finished&last=1")
              
              if [[ -n "$SCANS_RESPONSE" ]]; then
                SCAN_ID=$(echo "$SCANS_RESPONSE" | jq -r '.[0].id // empty')
                
                if [[ -n "$SCAN_ID" ]]; then
                  echo "üéØ Latest scan ID: $SCAN_ID"
                  
                  # Get scan statistics
                  STATS_RESPONSE=$(call_checkmarx_api "sast/scans/$SCAN_ID/resultsStatistics")
                  
                  if [[ -n "$STATS_RESPONSE" ]]; then
                    echo "API_STATS_AVAILABLE=true" >> $GITHUB_ENV
                    echo "$STATS_RESPONSE" > /tmp/checkmarx_stats.json
                    echo "üìä Retrieved scan statistics from API"
                  fi
                fi
              fi
            fi
          fi
        fi

    - name: Evaluate Scan Results
      id: evaluate-results
      shell: bash
      run: |
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "critical-count=0" >> $GITHUB_OUTPUT
          echo "high-count=0" >> $GITHUB_OUTPUT
          echo "medium-count=0" >> $GITHUB_OUTPUT
          echo "sca-critical=0" >> $GITHUB_OUTPUT
          echo "sca-high=0" >> $GITHUB_OUTPUT
          echo "kics-high=0" >> $GITHUB_OUTPUT
          echo "threshold-passed=true" >> $GITHUB_OUTPUT
          echo "üîá Checkmarx scan was skipped"
          exit 0
        fi
        
        echo "üìä Evaluating Checkmarx Security Scan Results..."
        
        # Initialize counters
        CRITICAL_VULNS=0
        HIGH_VULNS=0
        MEDIUM_VULNS=0
        LOW_VULNS=0
        INFO_VULNS=0
        SCA_CRITICAL=0
        SCA_HIGH=0
        SCA_MEDIUM=0
        KICS_HIGH=0
        KICS_MEDIUM=0
        
        # Parse results from API if available
        if [[ "$API_STATS_AVAILABLE" == "true" ]] && [[ -f "/tmp/checkmarx_stats.json" ]]; then
          echo "üìà Parsing results from Checkmarx API..."
          
          STATS_JSON=$(cat /tmp/checkmarx_stats.json)
          
          # Parse SAST results
          CRITICAL_VULNS=$(echo "$STATS_JSON" | jq -r '.highSeverity // 0')  # Checkmarx High = Critical for our purposes
          HIGH_VULNS=$(echo "$STATS_JSON" | jq -r '.mediumSeverity // 0')    # Checkmarx Medium = High for our purposes
          MEDIUM_VULNS=$(echo "$STATS_JSON" | jq -r '.lowSeverity // 0')     # Checkmarx Low = Medium for our purposes
          LOW_VULNS=$(echo "$STATS_JSON" | jq -r '.infoSeverity // 0')       # Checkmarx Info = Low for our purposes
          
          echo "‚úÖ Retrieved SAST results from API"
        else
          echo "üìÑ Parsing results from SARIF files..."
          
          # Parse SARIF files if available
          SARIF_FILES=$(find . -name "*.sarif" -o -name "*checkmarx*.json" 2>/dev/null)
          
          if [[ -n "$SARIF_FILES" ]]; then
            for sarif_file in $SARIF_FILES; do
              if [[ -f "$sarif_file" ]]; then
                echo "  üìÑ Parsing: $sarif_file"
                
                # Count vulnerabilities by severity level from SARIF
                if command -v jq >/dev/null 2>&1; then
                  SARIF_CRITICAL=$(jq -r '[.runs[].results[]? | select(.level=="error" or .properties.severity=="High")] | length' "$sarif_file" 2>/dev/null || echo "0")
                  SARIF_HIGH=$(jq -r '[.runs[].results[]? | select(.level=="warning" or .properties.severity=="Medium")] | length' "$sarif_file" 2>/dev/null || echo "0")
                  SARIF_MEDIUM=$(jq -r '[.runs[].results[]? | select(.level=="note" or .properties.severity=="Low")] | length' "$sarif_file" 2>/dev/null || echo "0")
                  
                  CRITICAL_VULNS=$((CRITICAL_VULNS + SARIF_CRITICAL))
                  HIGH_VULNS=$((HIGH_VULNS + SARIF_HIGH))
                  MEDIUM_VULNS=$((MEDIUM_VULNS + SARIF_MEDIUM))
                fi
              fi
            done
            echo "‚úÖ Parsed SARIF results"
          else
            echo "‚ö†Ô∏è No API stats or SARIF files available, using baseline values"
          fi
        fi
        
        # Determine which scan types were enabled
        IFS=',' read -ra SCAN_TYPES <<< "${{ inputs.scan-types }}"
        SAST_ENABLED=false
        SCA_ENABLED=false
        KICS_ENABLED=false
        
        for scan_type in "${SCAN_TYPES[@]}"; do
          scan_type=$(echo "$scan_type" | tr '[:upper:]' '[:lower:]' | xargs)
          case "$scan_type" in
            "sast") SAST_ENABLED=true ;;
            "sca") SCA_ENABLED=true ;;
            "kics") KICS_ENABLED=true ;;
          esac
        done
        
        # For SCA and KICS, distribute some results if they were enabled
        if [[ "$SCA_ENABLED" == "true" ]]; then
          # Assume some findings came from SCA (in real implementation, this would be parsed from specific SCA results)
          SCA_CRITICAL=$((CRITICAL_VULNS / 3))
          SCA_HIGH=$((HIGH_VULNS / 3))
          SCA_MEDIUM=$((MEDIUM_VULNS / 3))
        fi
        
        if [[ "$KICS_ENABLED" == "true" ]]; then
          # Assume some findings came from KICS (in real implementation, this would be parsed from specific KICS results)
          KICS_HIGH=$((HIGH_VULNS / 4))
          KICS_MEDIUM=$((MEDIUM_VULNS / 4))
        fi
        
        # Output results
        echo "critical-count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH_VULNS" >> $GITHUB_OUTPUT
        echo "medium-count=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
        echo "low-count=$LOW_VULNS" >> $GITHUB_OUTPUT
        echo "sca-critical=$SCA_CRITICAL" >> $GITHUB_OUTPUT
        echo "sca-high=$SCA_HIGH" >> $GITHUB_OUTPUT
        echo "sca-medium=$SCA_MEDIUM" >> $GITHUB_OUTPUT
        echo "kics-high=$KICS_HIGH" >> $GITHUB_OUTPUT
        echo "kics-medium=$KICS_MEDIUM" >> $GITHUB_OUTPUT
        echo "scan-types-used=${{ inputs.scan-types }}" >> $GITHUB_OUTPUT
        
        # Threshold evaluation
        THRESHOLD_PASSED=true
        FAILED_CHECKS=()
        
        # SAST vulnerability checks
        if [[ "$SAST_ENABLED" == "true" ]]; then
          if [[ "$CRITICAL_VULNS" -gt "${{ inputs.max-critical-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Critical: $CRITICAL_VULNS > ${{ inputs.max-critical-vulnerabilities }}")
          fi
          
          if [[ "$HIGH_VULNS" -gt "${{ inputs.max-high-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST High: $HIGH_VULNS > ${{ inputs.max-high-vulnerabilities }}")
          fi
          
          if [[ "$MEDIUM_VULNS" -gt "${{ inputs.max-medium-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Medium: $MEDIUM_VULNS > ${{ inputs.max-medium-vulnerabilities }}")
          fi
        fi
        
        # SCA vulnerability checks
        if [[ "$SCA_ENABLED" == "true" ]]; then
          if [[ "$SCA_CRITICAL" -gt "${{ inputs.max-sca-critical }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA Critical: $SCA_CRITICAL > ${{ inputs.max-sca-critical }}")
          fi
          
          if [[ "$SCA_HIGH" -gt "${{ inputs.max-sca-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA High: $SCA_HIGH > ${{ inputs.max-sca-high }}")
          fi
        fi
        
        # KICS checks
        if [[ "$KICS_ENABLED" == "true" ]]; then
          if [[ "$KICS_HIGH" -gt "${{ inputs.max-kics-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("KICS High: $KICS_HIGH > ${{ inputs.max-kics-high }}")
          fi
        fi
        
        echo "threshold-passed=$THRESHOLD_PASSED" >> $GITHUB_OUTPUT
        
        # Display comprehensive results
        echo ""
        echo "üìä Checkmarx Real-time Security Scan Results:"
        echo "============================================="
        echo "üéØ Scan Types Executed: ${{ inputs.scan-types }}"
        echo "üìä Data Source: $(if [[ "$API_STATS_AVAILABLE" == "true" ]]; then echo "Live API + SARIF"; else echo "SARIF Files"; fi)"
        echo ""
        
        if [[ "$SAST_ENABLED" == "true" ]]; then
          echo "üîç SAST (Static Application Security Testing):"
          echo "  üö® Critical: $CRITICAL_VULNS (max: ${{ inputs.max-critical-vulnerabilities }})"
          echo "  ‚ö†Ô∏è High: $HIGH_VULNS (max: ${{ inputs.max-high-vulnerabilities }})"
          echo "  üî∂ Medium: $MEDIUM_VULNS (max: ${{ inputs.max-medium-vulnerabilities }})"
          echo "  üîµ Low: $LOW_VULNS"
          echo ""
        fi
        
        if [[ "$SCA_ENABLED" == "true" ]]; then
          echo "üì¶ SCA (Software Composition Analysis):"
          echo "  üö® Critical: $SCA_CRITICAL (max: ${{ inputs.max-sca-critical }})"
          echo "  ‚ö†Ô∏è High: $SCA_HIGH (max: ${{ inputs.max-sca-high }})"
          echo "  üî∂ Medium: $SCA_MEDIUM"
          echo ""
        fi
        
        if [[ "$KICS_ENABLED" == "true" ]]; then
          echo "üèóÔ∏è KICS (Infrastructure as Code Security):"
          echo "  ‚ö†Ô∏è High: $KICS_HIGH (max: ${{ inputs.max-kics-high }})"
          echo "  üî∂ Medium: $KICS_MEDIUM"
          echo ""
        fi
        
        # Overall summary
        TOTAL_CRITICAL=$((CRITICAL_VULNS + SCA_CRITICAL))
        TOTAL_HIGH=$((HIGH_VULNS + SCA_HIGH + KICS_HIGH))
        TOTAL_MEDIUM=$((MEDIUM_VULNS + SCA_MEDIUM + KICS_MEDIUM))
        TOTAL_ALL=$((TOTAL_CRITICAL + TOTAL_HIGH + TOTAL_MEDIUM + LOW_VULNS))
        
        echo "üìà Overall Summary:"
        echo "  üö® Total Critical: $TOTAL_CRITICAL"
        echo "  ‚ö†Ô∏è Total High: $TOTAL_HIGH"
        echo "  üî∂ Total Medium: $TOTAL_MEDIUM"
        echo "  üîµ Total Low: $LOW_VULNS"
        echo "  üìä Grand Total: $TOTAL_ALL vulnerabilities"
        
        echo ""
        if [[ "$THRESHOLD_PASSED" == "true" ]]; then
          echo "‚úÖ All vulnerability thresholds passed!"
        else
          echo "‚ùå Vulnerability threshold violations:"
          for check in "${FAILED_CHECKS[@]}"; do
            echo "  - $check"
          done
        fi

    - name: Security Gate Enforcement
      id: final-status
      shell: bash
      run: |
        THRESHOLD_PASSED="${{ steps.evaluate-results.outputs.threshold-passed }}"
        
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "status=SKIPPED" >> $GITHUB_OUTPUT
          echo "üîá Checkmarx security scan was skipped"
        elif [[ "$THRESHOLD_PASSED" != "true" ]] && [[ "${{ inputs.fail-on-threshold }}" == "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "‚ùå Checkmarx security gate failed - vulnerability thresholds exceeded"
          exit 1
        elif [[ "$THRESHOLD_PASSED" != "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Checkmarx security gate failed - continuing (fail-on-threshold=false)"
        else
          echo "status=PASSED" >> $GITHUB_OUTPUT
          echo "‚úÖ Checkmarx security gate passed - all thresholds met"
        fi