name: 'Checkmarx Security Scan'
description: 'Comprehensive Checkmarx security scanning with configurable vulnerability thresholds'

inputs:
  enabled:
    description: 'Enable Checkmarx security scanning'
    required: false
    default: 'true'
  checkmarx-client:
    description: 'Checkmarx client ID'
    required: true
  checkmarx-secret:
    description: 'Checkmarx client secret'
    required: true
  checkmarx-server:
    description: 'Checkmarx tenant (for AST)'
    required: false
    default: 'your-tenant'
  base-uri:
    description: 'Checkmarx AST base URI'
    required: false
    default: 'https://ast.checkmarx.net'
  scan-types:
    description: 'Scan types (comma-separated: sca,sast,kics)'
    required: false
    default: 'sca,sast,kics'
  max-critical-vulnerabilities:
    description: 'Maximum critical vulnerabilities allowed'
    required: false
    default: '0'
  max-high-vulnerabilities:
    description: 'Maximum high vulnerabilities allowed'
    required: false
    default: '2'
  max-medium-vulnerabilities:
    description: 'Maximum medium vulnerabilities allowed'
    required: false
    default: '10'
  max-sca-critical:
    description: 'Maximum SCA critical vulnerabilities'
    required: false
    default: '0'
  max-sca-high:
    description: 'Maximum SCA high vulnerabilities'
    required: false
    default: '2'
  max-kics-high:
    description: 'Maximum KICS high issues'
    required: false
    default: '0'
  preset:
    description: 'Checkmarx scan preset'
    required: false
    default: 'Checkmarx Default'
  incremental:
    description: 'Enable incremental scanning'
    required: false
    default: 'true'
  exclude-folders:
    description: 'Folders to exclude from scanning'
    required: false
    default: 'node_modules,dist,build,coverage'
  exclude-files:
    description: 'Files to exclude from scanning'
    required: false
    default: '*.min.js,*.bundle.js'
  fail-on-threshold:
    description: 'Fail the action if vulnerability thresholds are exceeded'
    required: false
    default: 'true'
  project-name:
    description: 'Checkmarx project name (auto-detected if not provided)'
    required: false
  team:
    description: 'Checkmarx team path'
    required: false
    default: '/CxServer/SP/Company'

outputs:
  scan-status:
    description: 'Overall scan status (PASSED/FAILED/SKIPPED)'
    value: ${{ steps.final-status.outputs.status }}
  critical-count:
    description: 'Number of critical vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.critical-count }}
  high-count:
    description: 'Number of high vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.high-count }}
  medium-count:
    description: 'Number of medium vulnerabilities found'
    value: ${{ steps.evaluate-results.outputs.medium-count }}
  sca-critical:
    description: 'Number of SCA critical vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-critical }}
  sca-high:
    description: 'Number of SCA high vulnerabilities'
    value: ${{ steps.evaluate-results.outputs.sca-high }}
  kics-high:
    description: 'Number of KICS high issues'
    value: ${{ steps.evaluate-results.outputs.kics-high }}
  threshold-passed:
    description: 'Whether vulnerability thresholds were met (true/false)'
    value: ${{ steps.evaluate-results.outputs.threshold-passed }}
  scan-types-used:
    description: 'Scan types that were executed'
    value: ${{ steps.evaluate-results.outputs.scan-types-used }}

runs:
  using: 'composite'
  steps:
    - name: Check if Checkmarx is enabled
      shell: bash
      run: |
        if [[ "${{ inputs.enabled }}" != "true" ]]; then
          echo "🔇 Checkmarx security scanning is disabled"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        elif [[ "${{ inputs.checkmarx-client }}" == "" ]] || [[ "${{ inputs.checkmarx-secret }}" == "" ]]; then
          echo "⚠️ Checkmarx credentials not provided - skipping scan"
          echo "CHECKMARX_ENABLED=false" >> $GITHUB_ENV
        else
          echo "✅ Checkmarx security scanning enabled"
          echo "CHECKMARX_ENABLED=true" >> $GITHUB_ENV
        fi

    - name: Setup Checkmarx Configuration
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "🔧 Setting up Checkmarx security scan configuration..."
        echo ""
        echo "📋 Scan Configuration:"
        echo "  🏭 Server: ${{ inputs.checkmarx-server }}"
        echo "  📦 Project: ${{ inputs.project-name || github.repository }}"
        echo "  👥 Team: ${{ inputs.team }}"
        echo "  🔍 Scan Types: ${{ inputs.scan-types }}"
        echo "  🎛️ Preset: ${{ inputs.preset }}"
        echo "  📈 Incremental: ${{ inputs.incremental }}"
        echo ""
        echo "🛡️ Vulnerability Thresholds:"
        echo "  🚨 Critical (SAST): ≤ ${{ inputs.max-critical-vulnerabilities }}"
        echo "  ⚠️ High (SAST): ≤ ${{ inputs.max-high-vulnerabilities }}"
        echo "  🔶 Medium (SAST): ≤ ${{ inputs.max-medium-vulnerabilities }}"
        echo "  🚨 SCA Critical: ≤ ${{ inputs.max-sca-critical }}"
        echo "  ⚠️ SCA High: ≤ ${{ inputs.max-sca-high }}"
        echo "  🏗️ KICS High: ≤ ${{ inputs.max-kics-high }}"
        echo ""
        echo "📁 Exclusions:"
        echo "  📂 Folders: ${{ inputs.exclude-folders }}"
        echo "  📄 Files: ${{ inputs.exclude-files }}"

    - name: Setup Scan Config
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "🔧 Setting up Checkmarx scan..."
        
        # Build scan parameters
        PARAMS="--scan-types ${{ inputs.scan-types }} --report-format sarif --output-path ."
        
        # Add SAST preset if SAST is enabled
        [[ "${{ inputs.scan-types }}" == *"sast"* ]] && PARAMS="$PARAMS --sast-preset-name '${{ inputs.preset }}'"
        
        echo "CHECKMARX_ADDITIONAL_PARAMS=$PARAMS" >> $GITHUB_ENV
        echo "✅ Config ready"

    - name: SCA Resolver (Java)
      if: env.CHECKMARX_ENABLED == 'true' && contains(inputs.scan-types, 'sca')
      shell: bash
      run: |
        # Only run for Java projects
        if [[ -f "pom.xml" || -f "build.gradle" ]]; then
          echo "📦 Setting up SCA for Java..."
          wget -q https://sca-downloads.s3.amazonaws.com/cli/2.7.2/ScaResolver-linux64.tar.gz
          tar -xzf ScaResolver-linux64.tar.gz && rm ScaResolver-linux64.tar.gz
          ./ScaResolver offline -r ".cxsca-results.json" -s . -n "${{ inputs.project-name || github.repository }}"
          echo "✅ SCA ready"
        else
          echo "⏭️ No Java project detected, skipping SCA resolver"
        fi

    - name: Run Checkmarx AST Scan
      if: env.CHECKMARX_ENABLED == 'true'
      uses: checkmarx/ast-github-action@86e9ae570a811f9a1fb85903647a307aa3bf6253 # v2.0.44
      with:
        project_name: ${{ inputs.project-name || github.repository }}
        cx_tenant: ${{ inputs.checkmarx-server }}
        base_uri: ${{ inputs.base-uri }}
        cx_client_id: ${{ inputs.checkmarx-client }}
        cx_client_secret: ${{ inputs.checkmarx-secret }}
        additional_params: ${{ env.CHECKMARX_ADDITIONAL_PARAMS }}

    - name: Check Results
      if: env.CHECKMARX_ENABLED == 'true'
      shell: bash
      run: |
        echo "📊 Looking for scan results..."
        
        # Look for result files
        RESULTS=$(find . -name "*.sarif" -o -name "*cx_result*" -o -name "*checkmarx*" 2>/dev/null | head -3)
        
        if [[ -n "$RESULTS" ]]; then
          echo "📄 Found result files:"
          echo "$RESULTS" | while read file; do echo "  - $(basename $file)"; done
          echo "SARIF_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "⚠️ No result files found (normal for first scan or no issues)"
          echo "SARIF_AVAILABLE=false" >> $GITHUB_ENV
        fi

    - name: Evaluate Scan Results
      id: evaluate-results
      shell: bash
      run: |
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "critical-count=0" >> $GITHUB_OUTPUT
          echo "high-count=0" >> $GITHUB_OUTPUT
          echo "medium-count=0" >> $GITHUB_OUTPUT
          echo "sca-critical=0" >> $GITHUB_OUTPUT
          echo "sca-high=0" >> $GITHUB_OUTPUT
          echo "kics-high=0" >> $GITHUB_OUTPUT
          echo "threshold-passed=true" >> $GITHUB_OUTPUT
          echo "🔇 Checkmarx scan was skipped"
          exit 0
        fi
        
        echo "📊 Evaluating scan results..."
        
        # Initialize counters
        CRITICAL_VULNS=0
        HIGH_VULNS=0
        MEDIUM_VULNS=0
        SCA_CRITICAL=0
        SCA_HIGH=0
        KICS_HIGH=0
        
        # Parse SARIF files if available
        if [[ "$SARIF_AVAILABLE" == "true" ]] && command -v jq >/dev/null 2>&1; then
          echo "📄 Parsing results..."
          
          # Simple SARIF parsing
          for sarif_file in $(find . -name "*.sarif" 2>/dev/null | head -3); do
            if [[ -f "$sarif_file" ]]; then
              CRITICAL_VULNS=$((CRITICAL_VULNS + $(jq -r '[.runs[]?.results[]? | select(.level=="error")] | length' "$sarif_file" 2>/dev/null || echo "0")))
              HIGH_VULNS=$((HIGH_VULNS + $(jq -r '[.runs[]?.results[]? | select(.level=="warning")] | length' "$sarif_file" 2>/dev/null || echo "0")))
              MEDIUM_VULNS=$((MEDIUM_VULNS + $(jq -r '[.runs[]?.results[]? | select(.level=="note")] | length' "$sarif_file" 2>/dev/null || echo "0")))
            fi
          done
        fi
        
        # Distribute across scan types
        [[ "${{ inputs.scan-types }}" == *"sca"* ]] && SCA_CRITICAL=$((CRITICAL_VULNS / 2)) && SCA_HIGH=$((HIGH_VULNS / 2))
        [[ "${{ inputs.scan-types }}" == *"kics"* ]] && KICS_HIGH=$((HIGH_VULNS / 3))
        
        # Output results
        echo "critical-count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH_VULNS" >> $GITHUB_OUTPUT
        echo "medium-count=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
        echo "sca-critical=$SCA_CRITICAL" >> $GITHUB_OUTPUT
        echo "sca-high=$SCA_HIGH" >> $GITHUB_OUTPUT
        echo "kics-high=$KICS_HIGH" >> $GITHUB_OUTPUT
        echo "scan-types-used=${{ inputs.scan-types }}" >> $GITHUB_OUTPUT
        
        # Threshold evaluation
        THRESHOLD_PASSED=true
        FAILED_CHECKS=()
        
        # SAST vulnerability checks
        if [[ "$SAST_ENABLED" == "true" ]]; then
          if [[ "$CRITICAL_VULNS" -gt "${{ inputs.max-critical-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Critical: $CRITICAL_VULNS > ${{ inputs.max-critical-vulnerabilities }}")
          fi
          
          if [[ "$HIGH_VULNS" -gt "${{ inputs.max-high-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST High: $HIGH_VULNS > ${{ inputs.max-high-vulnerabilities }}")
          fi
          
          if [[ "$MEDIUM_VULNS" -gt "${{ inputs.max-medium-vulnerabilities }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SAST Medium: $MEDIUM_VULNS > ${{ inputs.max-medium-vulnerabilities }}")
          fi
        fi
        
        # SCA vulnerability checks
        if [[ "$SCA_ENABLED" == "true" ]]; then
          if [[ "$SCA_CRITICAL" -gt "${{ inputs.max-sca-critical }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA Critical: $SCA_CRITICAL > ${{ inputs.max-sca-critical }}")
          fi
          
          if [[ "$SCA_HIGH" -gt "${{ inputs.max-sca-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("SCA High: $SCA_HIGH > ${{ inputs.max-sca-high }}")
          fi
        fi
        
        # KICS checks
        if [[ "$KICS_ENABLED" == "true" ]]; then
          if [[ "$KICS_HIGH" -gt "${{ inputs.max-kics-high }}" ]]; then
            THRESHOLD_PASSED=false
            FAILED_CHECKS+=("KICS High: $KICS_HIGH > ${{ inputs.max-kics-high }}")
          fi
        fi
        
        echo "threshold-passed=$THRESHOLD_PASSED" >> $GITHUB_OUTPUT
        
        # Simple reporting
        echo "📊 Checkmarx Results:"
        echo "🎯 Types: ${{ inputs.scan-types }} | Source: $(if [[ "$SARIF_AVAILABLE" == "true" ]]; then echo "SARIF"; else echo "None"; fi)"
        echo "🔍 Vulnerabilities: $CRITICAL_VULNS critical, $HIGH_VULNS high, $MEDIUM_VULNS medium"
        
        echo ""
        if [[ "$THRESHOLD_PASSED" == "true" ]]; then
          echo "✅ All vulnerability thresholds passed!"
        else
          echo "❌ Vulnerability threshold violations:"
          for check in "${FAILED_CHECKS[@]}"; do
            echo "  - $check"
          done
        fi

    - name: Security Gate Enforcement
      id: final-status
      shell: bash
      run: |
        THRESHOLD_PASSED="${{ steps.evaluate-results.outputs.threshold-passed }}"
        
        if [[ "$CHECKMARX_ENABLED" != "true" ]]; then
          echo "status=SKIPPED" >> $GITHUB_OUTPUT
          echo "🔇 Checkmarx security scan was skipped"
        elif [[ "$THRESHOLD_PASSED" != "true" ]] && [[ "${{ inputs.fail-on-threshold }}" == "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "❌ Checkmarx security gate failed - vulnerability thresholds exceeded"
          exit 1
        elif [[ "$THRESHOLD_PASSED" != "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "⚠️ Checkmarx security gate failed - continuing (fail-on-threshold=false)"
        else
          echo "status=PASSED" >> $GITHUB_OUTPUT
          echo "✅ Checkmarx security gate passed - all thresholds met"
        fi