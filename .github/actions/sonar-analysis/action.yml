name: 'SonarCloud Analysis'
description: 'Run SonarCloud analysis with configurable thresholds'

inputs:
  sonar-token:
    description: 'SonarCloud token'
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  project-key:
    description: 'SonarCloud project key'
    required: false
  organization:
    description: 'SonarCloud organization'
    required: true
  sonar-host-url:
    description: 'SonarCloud/SonarQube host URL'
    required: false
    default: 'https://sonarcloud.io'
  skip-ssl-verification:
    description: 'Skip SSL certificate verification for self-signed certificates'
    required: false
    default: 'false'
  enabled:
    description: 'Enable SonarCloud scan'
    required: false
    default: 'true'
  min-code-coverage:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  max-blocker-issues:
    description: 'Maximum blocker issues allowed'
    required: false
    default: '0'
  max-critical-issues:
    description: 'Maximum critical issues allowed'
    required: false
    default: '0'
  app-location:
    description: 'Application source code location relative to repository root'
    required: false
    default: '/'

outputs:
  status:
    description: 'Quality gate status'
    value: ${{ steps.results.outputs.status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.enabled == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install SonarScanner
      if: inputs.enabled == 'true'
      shell: bash
      run: npm install -g sonarqube-scanner

    - name: Run SonarCloud Scan
      if: inputs.enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.app-location }}
      run: |
        echo "Running SonarCloud scan from directory: ${{ inputs.app-location }}"
        
        # Handle SSL verification for self-signed certificates
        if [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          export NODE_TLS_REJECT_UNAUTHORIZED=0
          echo "Warning: SSL certificate verification disabled"
        fi
        
        # Ensure we're in the correct directory and show contents
        pwd
        echo "Scanning files in:"
        ls -la
        
        sonar-scanner \
          -Dsonar.projectKey=${{ inputs.project-key || github.repository }} \
          -Dsonar.organization=${{ inputs.organization }} \
          -Dsonar.host.url=${{ inputs.sonar-host-url }} \
          -Dsonar.token=${{ inputs.sonar-token }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Get Results
      id: results
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        PROJECT_KEY="${{ inputs.project-key || github.repository }}"
        
        # Set curl SSL options
        CURL_OPTS="-s"
        if [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          CURL_OPTS="$CURL_OPTS -k"
          echo "Warning: Using insecure SSL for API calls"
        fi
        
        # Get quality gate
        GATE=$(curl $CURL_OPTS -u "${{ inputs.sonar-token }}:" \
          "${{ inputs.sonar-host-url }}/api/qualitygates/project_status?projectKey=${PROJECT_KEY//\//%2F}" | \
          jq -r '.projectStatus.status // "OK"')
        
        # Get metrics
        METRICS=$(curl $CURL_OPTS -u "${{ inputs.sonar-token }}:" \
          "${{ inputs.sonar-host-url }}/api/measures/component?component=${PROJECT_KEY//\//%2F}&metricKeys=coverage,blocker_violations,critical_violations")
        
        COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        BLOCKERS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="blocker_violations") | .value // "0"')
        CRITICALS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="critical_violations") | .value // "0"')
        
        # Check thresholds
        STATUS="PASSED"
        [[ "${COVERAGE%.*}" -lt "${{ inputs.min-code-coverage }}" ]] && STATUS="FAILED"
        [[ "$BLOCKERS" -gt "${{ inputs.max-blocker-issues }}" ]] && STATUS="FAILED"
        [[ "$CRITICALS" -gt "${{ inputs.max-critical-issues }}" ]] && STATUS="FAILED"
        [[ "$GATE" == "ERROR" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "SonarCloud: $STATUS | Coverage: ${COVERAGE}% | Issues: $CRITICALS critical, $BLOCKERS blocker"

          - name: Skip (Disabled)
        if: inputs.enabled != 'true'
        shell: bash
        run: echo "SonarCloud scan disabled"