name: 'SonarCloud Analysis'
description: 'Run SonarCloud analysis with configurable thresholds'

inputs:
  sonar-token:
    description: 'SonarCloud token'
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  project-key:
    description: 'SonarCloud project key'
    required: false
  organization:
    description: 'SonarCloud organization'
    required: true
  enabled:
    description: 'Enable SonarCloud scan'
    required: false
    default: 'true'
  min-code-coverage:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  max-blocker-issues:
    description: 'Maximum blocker issues allowed'
    required: false
    default: '0'
  max-critical-issues:
    description: 'Maximum critical issues allowed'
    required: false
    default: '0'

outputs:
  status:
    description: 'Quality gate status'
    value: ${{ steps.results.outputs.status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.enabled == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install SonarScanner
      if: inputs.enabled == 'true'
      shell: bash
      run: npm install -g sonarqube-scanner

    - name: Run SonarCloud Scan
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ inputs.project-key || github.repository }} \
          -Dsonar.organization=${{ inputs.organization }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ inputs.sonar-token }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Get Results
      id: results
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        PROJECT_KEY="${{ inputs.project-key || github.repository }}"
        
        # Get quality gate
        GATE=$(curl -s -u "${{ inputs.sonar-token }}:" \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY//\//%2F}" | \
          jq -r '.projectStatus.status // "OK"')
        
        # Get metrics
        METRICS=$(curl -s -u "${{ inputs.sonar-token }}:" \
          "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY//\//%2F}&metricKeys=coverage,blocker_violations,critical_violations")
        
        COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        BLOCKERS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="blocker_violations") | .value // "0"')
        CRITICALS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="critical_violations") | .value // "0"')
        
        # Check thresholds
        STATUS="PASSED"
        [[ "${COVERAGE%.*}" -lt "${{ inputs.min-code-coverage }}" ]] && STATUS="FAILED"
        [[ "$BLOCKERS" -gt "${{ inputs.max-blocker-issues }}" ]] && STATUS="FAILED"
        [[ "$CRITICALS" -gt "${{ inputs.max-critical-issues }}" ]] && STATUS="FAILED"
        [[ "$GATE" == "ERROR" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä SonarCloud: $STATUS | Coverage: ${COVERAGE}% | Issues: $CRITICALS critical, $BLOCKERS blocker"

    - name: Skip (Disabled)
      if: inputs.enabled != 'true'
      shell: bash
      run: echo "‚è≠Ô∏è SonarCloud scan disabled"