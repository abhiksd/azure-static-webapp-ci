name: 'SonarCloud Analysis'
description: 'Run SonarCloud analysis with configurable thresholds'

inputs:
  sonar-token:
    description: 'SonarCloud token'
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  project-key:
    description: 'SonarCloud project key'
    required: false
  organization:
    description: 'SonarCloud organization'
    required: true
  sonar-host-url:
    description: 'SonarCloud/SonarQube host URL'
    required: false
    default: 'https://sonarcloud.io'
  skip-ssl-verification:
    description: 'Skip SSL certificate verification for self-signed certificates'
    required: false
    default: 'false'
  enabled:
    description: 'Enable SonarCloud scan'
    required: false
    default: 'true'
  min-code-coverage:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  max-blocker-issues:
    description: 'Maximum blocker issues allowed'
    required: false
    default: '0'
  max-critical-issues:
    description: 'Maximum critical issues allowed'
    required: false
    default: '0'
  app-location:
    description: 'Application source code location relative to repository root'
    required: false
    default: '/'
  debug:
    description: 'Enable debug output for troubleshooting'
    required: false
    default: 'false'

outputs:
  status:
    description: 'Quality gate status'
    value: ${{ steps.results.outputs.status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.enabled == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install SonarScanner
      if: inputs.enabled == 'true'
      shell: bash
      run: npm install -g sonarqube-scanner

    - name: Run SonarCloud Scan
      if: inputs.enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.app-location }}
      run: |
        echo "Running SonarCloud scan from directory: ${{ inputs.app-location }}"
        
        # Handle SSL verification for self-signed certificates
        if [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          export NODE_TLS_REJECT_UNAUTHORIZED=0
          echo "Warning: SSL certificate verification disabled"
        fi
        
        # Ensure we're in the correct directory and show contents
        pwd
        echo "Scanning files in:"
        ls -la
        
        sonar-scanner \
          -Dsonar.projectKey=${{ inputs.project-key || github.repository }} \
          -Dsonar.organization=${{ inputs.organization }} \
          -Dsonar.host.url=${{ inputs.sonar-host-url }} \
          -Dsonar.token=${{ inputs.sonar-token }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Get Results
      id: results
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        PROJECT_KEY="${{ inputs.project-key || github.repository }}"
        
        # Normalize the SonarQube host URL (remove trailing slash)
        SONAR_HOST="${{ inputs.sonar-host-url }}"
        SONAR_HOST="${SONAR_HOST%/}"  # Remove trailing slash if present
        
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG: Original host URL: ${{ inputs.sonar-host-url }}"
          echo "DEBUG: Normalized host URL: $SONAR_HOST"
          echo "DEBUG: Project key: $PROJECT_KEY"
          echo "DEBUG: URL-encoded project key: ${PROJECT_KEY//\//%2F}"
        fi
        
        # Set curl SSL options
        CURL_OPTS="-s"
        if [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          CURL_OPTS="$CURL_OPTS -k"
          echo "Warning: Using insecure SSL for API calls"
        fi
        
        # Get quality gate with error handling
        echo "Fetching quality gate status for project: ${PROJECT_KEY}"
        GATE_URL="${SONAR_HOST}/api/qualitygates/project_status"
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG: Quality gate base URL: $GATE_URL"
          echo "DEBUG: Full URL would be: ${GATE_URL}?projectKey=${PROJECT_KEY}"
        fi
        GATE_RESPONSE=$(curl $CURL_OPTS -w "HTTP_CODE:%{http_code}" -u "${{ inputs.sonar-token }}:" \
          --get \
          --data-urlencode "projectKey=${PROJECT_KEY}" \
          "$GATE_URL")
        
        HTTP_CODE=$(echo "$GATE_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        GATE_JSON=$(echo "$GATE_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG: Quality gate HTTP code: $HTTP_CODE"
          echo "DEBUG: Quality gate response: $GATE_JSON"
        fi
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "Error: SonarQube API returned HTTP $HTTP_CODE"
          echo "Response: $GATE_JSON"
          GATE="ERROR"
        else
          # Validate JSON before parsing
          if echo "$GATE_JSON" | jq empty 2>/dev/null; then
            GATE=$(echo "$GATE_JSON" | jq -r '.projectStatus.status // "OK"')
          else
            echo "Error: Invalid JSON response from quality gate API"
            echo "Response: $GATE_JSON"
            GATE="ERROR"
          fi
        fi
        
        # Get metrics with error handling
        echo "Fetching metrics for project: ${PROJECT_KEY}"
        
        # URL encode the project key properly
        ENCODED_PROJECT_KEY=$(echo "${PROJECT_KEY}" | sed 's/\//%2F/g')
        
        # Construct the metrics URL with proper encoding
        METRICS_URL="${SONAR_HOST}/api/measures/component"
        
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG: Metrics base URL: $METRICS_URL"
          echo "DEBUG: Project key: $PROJECT_KEY"
          echo "DEBUG: Encoded project key: $ENCODED_PROJECT_KEY"
          echo "DEBUG: Full URL would be: ${METRICS_URL}?component=${ENCODED_PROJECT_KEY}&metricKeys=coverage,blocker_violations,critical_violations"
        fi
        
        # Use curl with proper parameter passing to avoid URL issues
        METRICS_RESPONSE=$(curl $CURL_OPTS -w "HTTP_CODE:%{http_code}" -u "${{ inputs.sonar-token }}:" \
          --get \
          --data-urlencode "component=${PROJECT_KEY}" \
          --data-urlencode "metricKeys=coverage,blocker_violations,critical_violations" \
          "$METRICS_URL")
        
        METRICS_HTTP_CODE=$(echo "$METRICS_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        METRICS=$(echo "$METRICS_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "DEBUG: Metrics HTTP code: $METRICS_HTTP_CODE"
          echo "DEBUG: Metrics response: $METRICS"
        fi
        
        if [ "$METRICS_HTTP_CODE" != "200" ]; then
          echo "Error: SonarQube metrics API returned HTTP $METRICS_HTTP_CODE"
          echo "Response: $METRICS"
          COVERAGE="0"
          BLOCKERS="0"
          CRITICALS="0"
        else
          # Validate JSON before parsing
          if echo "$METRICS" | jq empty 2>/dev/null; then
            COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
            BLOCKERS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="blocker_violations") | .value // "0"')
            CRITICALS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="critical_violations") | .value // "0"')
          else
            echo "Error: Invalid JSON response from metrics API"
            echo "Response: $METRICS"
            COVERAGE="0"
            BLOCKERS="0"
            CRITICALS="0"
          fi
        fi
        
        # Check thresholds
        STATUS="PASSED"
        [[ "${COVERAGE%.*}" -lt "${{ inputs.min-code-coverage }}" ]] && STATUS="FAILED"
        [[ "$BLOCKERS" -gt "${{ inputs.max-blocker-issues }}" ]] && STATUS="FAILED"
        [[ "$CRITICALS" -gt "${{ inputs.max-critical-issues }}" ]] && STATUS="FAILED"
        [[ "$GATE" == "ERROR" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "SonarCloud: $STATUS | Coverage: ${COVERAGE}% | Issues: $CRITICALS critical, $BLOCKERS blocker"

    - name: Skip (Disabled)
      if: inputs.enabled != 'true'
      shell: bash
      run: echo "SonarCloud scan disabled"