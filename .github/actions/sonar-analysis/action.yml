name: 'SonarCloud Analysis'
description: 'Comprehensive SonarCloud analysis with configurable quality gates and coverage thresholds'

inputs:
  enabled:
    description: 'Enable SonarCloud analysis'
    required: false
    default: 'true'
  sonar-token:
    description: 'SonarCloud authentication token'
    required: true
  github-token:
    description: 'GitHub token for PR analysis'
    required: true
  min-code-coverage:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  min-branch-coverage:
    description: 'Minimum branch coverage percentage'
    required: false
    default: '70'
  min-line-coverage:
    description: 'Minimum line coverage percentage'
    required: false
    default: '80'
  sonar-maintainability-rating:
    description: 'Target maintainability rating (A-E)'
    required: false
    default: 'A'
  sonar-reliability-rating:
    description: 'Target reliability rating (A-E)'
    required: false
    default: 'A'
  sonar-security-rating:
    description: 'Target security rating (A-E)'
    required: false
    default: 'A'
  max-blocker-issues:
    description: 'Maximum blocker issues allowed'
    required: false
    default: '0'
  max-critical-issues:
    description: 'Maximum critical issues allowed'
    required: false
    default: '0'
  max-major-issues:
    description: 'Maximum major issues allowed'
    required: false
    default: '5'
  project-key:
    description: 'SonarCloud project key (auto-detected if not provided)'
    required: false
  organization:
    description: 'SonarCloud organization (auto-detected if not provided)'
    required: false
  coverage-exclusions:
    description: 'Files to exclude from coverage analysis'
    required: false
    default: '**/node_modules/**,**/dist/**,**/build/**,**/coverage/**,**/*.test.*,**/*.spec.*'
  fail-on-quality-gate:
    description: 'Fail the action if quality gate fails'
    required: false
    default: 'true'

outputs:
  quality-gate:
    description: 'Quality gate status (PASSED/FAILED)'
    value: ${{ steps.quality-gate.outputs.status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.quality-gate.outputs.coverage }}
  maintainability:
    description: 'Maintainability rating'
    value: ${{ steps.quality-gate.outputs.maintainability }}
  reliability:
    description: 'Reliability rating'
    value: ${{ steps.quality-gate.outputs.reliability }}
  security:
    description: 'Security rating'
    value: ${{ steps.quality-gate.outputs.security }}
  blocker-issues:
    description: 'Number of blocker issues'
    value: ${{ steps.quality-gate.outputs.blocker-issues }}
  critical-issues:
    description: 'Number of critical issues'
    value: ${{ steps.quality-gate.outputs.critical-issues }}
  major-issues:
    description: 'Number of major issues'
    value: ${{ steps.quality-gate.outputs.major-issues }}
  scan-status:
    description: 'Overall scan status (PASSED/FAILED/SKIPPED)'
    value: ${{ steps.final-status.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Check if SonarCloud is enabled
      shell: bash
      run: |
        if [[ "${{ inputs.enabled }}" != "true" ]]; then
          echo "üîá SonarCloud analysis is disabled"
          echo "SONAR_ENABLED=false" >> $GITHUB_ENV
        elif [[ "${{ inputs.sonar-token }}" == "" ]]; then
          echo "‚ö†Ô∏è SonarCloud token not provided - skipping analysis"
          echo "SONAR_ENABLED=false" >> $GITHUB_ENV
        else
          echo "‚úÖ SonarCloud analysis enabled"
          echo "SONAR_ENABLED=true" >> $GITHUB_ENV
        fi

    - name: Setup SonarCloud Configuration
      if: env.SONAR_ENABLED == 'true'
      shell: bash
      run: |
        echo "üîß Setting up SonarCloud configuration..."
        
        # Create or update sonar-project.properties
        cat > sonar-project.properties << EOF
        # SonarCloud Configuration
        sonar.projectKey=${{ inputs.project-key || github.repository }}
        sonar.organization=${{ inputs.organization || github.repository_owner }}
        sonar.projectName=${{ github.repository }}
        
        # Source and test configurations
        sonar.sources=src
        sonar.tests=src
        sonar.test.inclusions=**/*.test.*,**/*.spec.*
        sonar.exclusions=node_modules/**,dist/**,build/**,coverage/**
        
        # Coverage configuration
        sonar.javascript.lcov.reportPaths=coverage/lcov.info
        sonar.typescript.lcov.reportPaths=coverage/lcov.info
        sonar.coverage.exclusions=${{ inputs.coverage-exclusions }}
        
        # Quality gate thresholds
        sonar.qualitygate.wait=true
        EOF
        
        echo "üìã SonarCloud configuration created"

    - name: Run SonarCloud Analysis
      if: env.SONAR_ENABLED == 'true'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        SONAR_TOKEN: ${{ inputs.sonar-token }}

    - name: Wait for SonarCloud Quality Gate
      if: env.SONAR_ENABLED == 'true'
      shell: bash
      run: |
        echo "‚è≥ Waiting for SonarCloud analysis to complete..."
        
        # Wait for the analysis to complete
        sleep 30
        
        echo "‚úÖ SonarCloud analysis completed, checking quality gate..."

    - name: Get Real-time SonarCloud Results
      id: quality-gate
      if: env.SONAR_ENABLED == 'true'
      shell: bash
      run: |
        if [[ "$SONAR_ENABLED" != "true" ]]; then
          echo "status=SKIPPED" >> $GITHUB_OUTPUT
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "maintainability=N/A" >> $GITHUB_OUTPUT
          echo "reliability=N/A" >> $GITHUB_OUTPUT
          echo "security=N/A" >> $GITHUB_OUTPUT
          echo "blocker-issues=0" >> $GITHUB_OUTPUT
          echo "critical-issues=0" >> $GITHUB_OUTPUT
          echo "major-issues=0" >> $GITHUB_OUTPUT
          echo "üîá SonarCloud analysis was skipped"
          exit 0
        fi
        
        echo "üìä Fetching real-time SonarCloud Quality Gate results..."
        
        # Set up variables
        PROJECT_KEY="${{ inputs.project-key || github.repository }}"
        ORGANIZATION="${{ inputs.organization || github.repository_owner }}"
        
        # Replace '/' with '%2F' for URL encoding if project key contains slash
        PROJECT_KEY_ENCODED=$(echo "$PROJECT_KEY" | sed 's/\//%2F/g')
        
        echo "üîç Project: $PROJECT_KEY"
        echo "üè¢ Organization: $ORGANIZATION"
        
        # Function to call SonarCloud API
        call_sonar_api() {
          local endpoint="$1"
          curl -s -u "${{ inputs.sonar-token }}:" \
            "https://sonarcloud.io/api/$endpoint" \
            -H "Accept: application/json"
        }
        
        # Get Quality Gate status
        echo "üéØ Fetching Quality Gate status..."
        QUALITY_GATE_RESPONSE=$(call_sonar_api "qualitygates/project_status?projectKey=$PROJECT_KEY_ENCODED")
        
        if [[ -z "$QUALITY_GATE_RESPONSE" ]] || [[ "$QUALITY_GATE_RESPONSE" == *"error"* ]]; then
          echo "‚ö†Ô∏è Could not fetch quality gate status, using SonarCloud action result"
          QUALITY_GATE="PASSED"  # Default if API fails
        else
          QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_RESPONSE" | jq -r '.projectStatus.status // "UNKNOWN"')
          
          case "$QUALITY_GATE_STATUS" in
            "OK"|"PASSED")
              QUALITY_GATE="PASSED"
              ;;
            "ERROR"|"FAILED")
              QUALITY_GATE="FAILED"
              ;;
            "WARN"|"WARNING")
              QUALITY_GATE="WARNING"
              ;;
            *)
              QUALITY_GATE="UNKNOWN"
              ;;
          esac
        fi
        
        # Get project measures (metrics)
        echo "üìà Fetching project metrics..."
        METRICS="coverage,line_coverage,branch_coverage,sqale_rating,reliability_rating,security_rating,blocker_violations,critical_violations,major_violations,minor_violations,info_violations"
        MEASURES_RESPONSE=$(call_sonar_api "measures/component?component=$PROJECT_KEY_ENCODED&metricKeys=$METRICS")
        
        # Parse metrics with fallback values
        if [[ -n "$MEASURES_RESPONSE" ]] && [[ "$MEASURES_RESPONSE" != *"error"* ]]; then
          COVERAGE=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
          LINE_COVERAGE=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="line_coverage") | .value // "0"')
          BRANCH_COVERAGE=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="branch_coverage") | .value // "0"')
          
          # Convert rating numbers to letters (1=A, 2=B, 3=C, 4=D, 5=E)
          MAINTAINABILITY_NUM=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="sqale_rating") | .value // "1"')
          RELIABILITY_NUM=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="reliability_rating") | .value // "1"')
          SECURITY_NUM=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="security_rating") | .value // "1"')
          
          # Convert numbers to letters
          case "$MAINTAINABILITY_NUM" in
            "1") MAINTAINABILITY="A" ;;
            "2") MAINTAINABILITY="B" ;;
            "3") MAINTAINABILITY="C" ;;
            "4") MAINTAINABILITY="D" ;;
            "5") MAINTAINABILITY="E" ;;
            *) MAINTAINABILITY="A" ;;
          esac
          
          case "$RELIABILITY_NUM" in
            "1") RELIABILITY="A" ;;
            "2") RELIABILITY="B" ;;
            "3") RELIABILITY="C" ;;
            "4") RELIABILITY="D" ;;
            "5") RELIABILITY="E" ;;
            *) RELIABILITY="A" ;;
          esac
          
          case "$SECURITY_NUM" in
            "1") SECURITY="A" ;;
            "2") SECURITY="B" ;;
            "3") SECURITY="C" ;;
            "4") SECURITY="D" ;;
            "5") SECURITY="E" ;;
            *) SECURITY="A" ;;
          esac
          
          BLOCKER_ISSUES=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="blocker_violations") | .value // "0"')
          CRITICAL_ISSUES=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="critical_violations") | .value // "0"')
          MAJOR_ISSUES=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="major_violations") | .value // "0"')
          MINOR_ISSUES=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="minor_violations") | .value // "0"')
          INFO_ISSUES=$(echo "$MEASURES_RESPONSE" | jq -r '.component.measures[] | select(.metric=="info_violations") | .value // "0"')
        else
          echo "‚ö†Ô∏è Could not fetch project metrics, using default values"
          COVERAGE="0"
          LINE_COVERAGE="0"
          BRANCH_COVERAGE="0"
          MAINTAINABILITY="A"
          RELIABILITY="A"
          SECURITY="A"
          BLOCKER_ISSUES="0"
          CRITICAL_ISSUES="0"
          MAJOR_ISSUES="0"
          MINOR_ISSUES="0"
          INFO_ISSUES="0"
        fi
        
        # Remove decimal points for easier comparison
        COVERAGE_INT=$(echo "$COVERAGE" | cut -d'.' -f1)
        LINE_COVERAGE_INT=$(echo "$LINE_COVERAGE" | cut -d'.' -f1)
        BRANCH_COVERAGE_INT=$(echo "$BRANCH_COVERAGE" | cut -d'.' -f1)
        
        # Set outputs
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "line-coverage=$LINE_COVERAGE" >> $GITHUB_OUTPUT
        echo "branch-coverage=$BRANCH_COVERAGE" >> $GITHUB_OUTPUT
        echo "maintainability=$MAINTAINABILITY" >> $GITHUB_OUTPUT
        echo "reliability=$RELIABILITY" >> $GITHUB_OUTPUT
        echo "security=$SECURITY" >> $GITHUB_OUTPUT
        echo "blocker-issues=$BLOCKER_ISSUES" >> $GITHUB_OUTPUT
        echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
        echo "major-issues=$MAJOR_ISSUES" >> $GITHUB_OUTPUT
        echo "minor-issues=$MINOR_ISSUES" >> $GITHUB_OUTPUT
        echo "info-issues=$INFO_ISSUES" >> $GITHUB_OUTPUT
        
        # Quality gate evaluation based on our thresholds
        FAILED_CHECKS=()
        
        # Coverage checks
        if [[ "$COVERAGE_INT" -lt "${{ inputs.min-code-coverage }}" ]]; then
          QUALITY_GATE="FAILED"
          FAILED_CHECKS+=("Code coverage: ${COVERAGE}% < ${{ inputs.min-code-coverage }}%")
        fi
        
        if [[ "$BRANCH_COVERAGE_INT" -lt "${{ inputs.min-branch-coverage }}" ]]; then
          QUALITY_GATE="FAILED"
          FAILED_CHECKS+=("Branch coverage: ${BRANCH_COVERAGE}% < ${{ inputs.min-branch-coverage }}%")
        fi
        
        # Rating checks - fail if rating is worse than target
        check_rating() {
          local current="$1"
          local target="$2"
          local metric_name="$3"
          
          # Convert to numbers for comparison (A=1, B=2, C=3, D=4, E=5)
          local current_num target_num
          case "$current" in
            "A") current_num=1 ;;
            "B") current_num=2 ;;
            "C") current_num=3 ;;
            "D") current_num=4 ;;
            "E") current_num=5 ;;
            *) current_num=1 ;;
          esac
          
          case "$target" in
            "A") target_num=1 ;;
            "B") target_num=2 ;;
            "C") target_num=3 ;;
            "D") target_num=4 ;;
            "E") target_num=5 ;;
            *) target_num=1 ;;
          esac
          
          if [[ "$current_num" -gt "$target_num" ]]; then
            QUALITY_GATE="FAILED"
            FAILED_CHECKS+=("$metric_name rating: $current (expected $target or better)")
          fi
        }
        
        check_rating "$MAINTAINABILITY" "${{ inputs.sonar-maintainability-rating }}" "Maintainability"
        check_rating "$RELIABILITY" "${{ inputs.sonar-reliability-rating }}" "Reliability"
        check_rating "$SECURITY" "${{ inputs.sonar-security-rating }}" "Security"
        
        # Issue count checks
        if [[ "$BLOCKER_ISSUES" -gt "${{ inputs.max-blocker-issues }}" ]]; then
          QUALITY_GATE="FAILED"
          FAILED_CHECKS+=("Blocker issues: $BLOCKER_ISSUES > ${{ inputs.max-blocker-issues }}")
        fi
        
        if [[ "$CRITICAL_ISSUES" -gt "${{ inputs.max-critical-issues }}" ]]; then
          QUALITY_GATE="FAILED"
          FAILED_CHECKS+=("Critical issues: $CRITICAL_ISSUES > ${{ inputs.max-critical-issues }}")
        fi
        
        if [[ "$MAJOR_ISSUES" -gt "${{ inputs.max-major-issues }}" ]]; then
          QUALITY_GATE="FAILED"
          FAILED_CHECKS+=("Major issues: $MAJOR_ISSUES > ${{ inputs.max-major-issues }}")
        fi
        
        echo "status=$QUALITY_GATE" >> $GITHUB_OUTPUT
        
        # Display comprehensive results
        echo ""
        echo "üìä SonarCloud Real-time Quality Gate Results:"
        echo "=============================================="
        echo "üéØ Overall Status: $QUALITY_GATE"
        echo ""
        echo "üìà Coverage Metrics:"
        echo "  üìä Overall Coverage: ${COVERAGE}% (min: ${{ inputs.min-code-coverage }}%)"
        echo "  üìè Line Coverage: ${LINE_COVERAGE}% (min: ${{ inputs.min-line-coverage }}%)"
        echo "  üåø Branch Coverage: ${BRANCH_COVERAGE}% (min: ${{ inputs.min-branch-coverage }}%)"
        echo ""
        echo "‚≠ê Quality Ratings:"
        echo "  üîß Maintainability: $MAINTAINABILITY (target: ${{ inputs.sonar-maintainability-rating }})"
        echo "  üõ°Ô∏è Reliability: $RELIABILITY (target: ${{ inputs.sonar-reliability-rating }})"
        echo "  üîí Security: $SECURITY (target: ${{ inputs.sonar-security-rating }})"
        echo ""
        echo "üö´ Issue Counts:"
        echo "  üõë Blocker: $BLOCKER_ISSUES (max: ${{ inputs.max-blocker-issues }})"
        echo "  üö® Critical: $CRITICAL_ISSUES (max: ${{ inputs.max-critical-issues }})"
        echo "  ‚ö†Ô∏è Major: $MAJOR_ISSUES (max: ${{ inputs.max-major-issues }})"
        echo "  üìù Minor: $MINOR_ISSUES"
        echo "  ‚ÑπÔ∏è Info: $INFO_ISSUES"
        
        if [[ "$QUALITY_GATE" == "FAILED" ]]; then
          echo ""
          echo "‚ùå Quality Gate Failed - Threshold Violations:"
          for check in "${FAILED_CHECKS[@]}"; do
            echo "  - $check"
          done
        else
          echo ""
          echo "‚úÖ Quality Gate Passed - All thresholds met!"
        fi

    - name: Skip Quality Gate (Disabled)
      id: skip-quality-gate
      if: env.SONAR_ENABLED != 'true'
      shell: bash
      run: |
        echo "status=SKIPPED" >> $GITHUB_OUTPUT
        echo "coverage=0" >> $GITHUB_OUTPUT
        echo "line-coverage=0" >> $GITHUB_OUTPUT
        echo "branch-coverage=0" >> $GITHUB_OUTPUT
        echo "maintainability=N/A" >> $GITHUB_OUTPUT
        echo "reliability=N/A" >> $GITHUB_OUTPUT
        echo "security=N/A" >> $GITHUB_OUTPUT
        echo "blocker-issues=0" >> $GITHUB_OUTPUT
        echo "critical-issues=0" >> $GITHUB_OUTPUT
        echo "major-issues=0" >> $GITHUB_OUTPUT
        echo "minor-issues=0" >> $GITHUB_OUTPUT
        echo "info-issues=0" >> $GITHUB_OUTPUT
        echo "üîá SonarCloud analysis was skipped"

    - name: Quality Gate Enforcement
      id: final-status
      shell: bash
      run: |
        GATE_STATUS="${{ steps.quality-gate.outputs.status || steps.skip-quality-gate.outputs.status }}"
        
        if [[ "$SONAR_ENABLED" != "true" ]] || [[ "$GATE_STATUS" == "SKIPPED" ]]; then
          echo "status=SKIPPED" >> $GITHUB_OUTPUT
          echo "üîá SonarCloud analysis was skipped"
        elif [[ "$GATE_STATUS" == "FAILED" ]] && [[ "${{ inputs.fail-on-quality-gate }}" == "true" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "‚ùå SonarCloud quality gate failed - blocking deployment"
          exit 1
        elif [[ "$GATE_STATUS" == "FAILED" ]]; then
          echo "status=FAILED" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è SonarCloud quality gate failed - continuing (fail-on-quality-gate=false)"
        else
          echo "status=PASSED" >> $GITHUB_OUTPUT
          echo "‚úÖ SonarCloud quality gate passed"
        fi