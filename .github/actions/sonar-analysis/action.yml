name: 'SonarCloud Analysis'
description: 'Run SonarCloud analysis with configurable thresholds'

inputs:
  sonar-token:
    description: 'SonarCloud token'
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  project-key:
    description: 'SonarCloud project key'
    required: false
  organization:
    description: 'SonarCloud organization'
    required: true
  sonar-host-url:
    description: 'SonarCloud/SonarQube host URL'
    required: false
    default: 'https://sonarcloud.io'
  skip-ssl-verification:
    description: 'Skip SSL certificate verification for self-signed certificates'
    required: false
    default: 'false'
  custom-ca-cert:
    description: 'Base64 encoded custom CA certificate for enterprise servers'
    required: false
  enabled:
    description: 'Enable SonarCloud scan'
    required: false
    default: 'true'
  min-code-coverage:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  max-blocker-issues:
    description: 'Maximum blocker issues allowed'
    required: false
    default: '0'
  max-critical-issues:
    description: 'Maximum critical issues allowed'
    required: false
    default: '0'

outputs:
  status:
    description: 'Quality gate status'
    value: ${{ steps.results.outputs.status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.results.outputs.coverage }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      if: inputs.enabled == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install SonarScanner
      if: inputs.enabled == 'true'
      shell: bash
      run: npm install -g sonarqube-scanner

    - name: Import Custom CA Certificate
      if: inputs.enabled == 'true' && inputs.custom-ca-cert != ''
      shell: bash
      run: |
        echo "Setting up custom CA certificate for enterprise SonarQube server..."
        
        # Create custom certificate file
        echo "${{ inputs.custom-ca-cert }}" | base64 -d > /tmp/sonar-ca-cert.crt
        
        # Verify certificate format
        if openssl x509 -in /tmp/sonar-ca-cert.crt -text -noout > /dev/null 2>&1; then
          echo "Certificate format validated successfully"
        else
          echo "Error: Invalid certificate format"
          exit 1
        fi
        
        # Add certificate to system trust store
        sudo cp /tmp/sonar-ca-cert.crt /usr/local/share/ca-certificates/sonar-ca-cert.crt
        sudo update-ca-certificates
        
        # Set Node.js to use system certificates
        export NODE_EXTRA_CA_CERTS=/tmp/sonar-ca-cert.crt
        echo "NODE_EXTRA_CA_CERTS=/tmp/sonar-ca-cert.crt" >> $GITHUB_ENV
        
        # Also add to curl's certificate bundle for API calls
        cat /tmp/sonar-ca-cert.crt >> /tmp/curl-ca-bundle.crt
        cat /etc/ssl/certs/ca-certificates.crt >> /tmp/curl-ca-bundle.crt
        echo "CURL_CA_BUNDLE=/tmp/curl-ca-bundle.crt" >> $GITHUB_ENV
        
        echo "Custom CA certificate imported successfully"

    - name: Import Complete CA Certificate Chain
      if: inputs.enabled == 'true' && inputs.custom-ca-cert == '' && inputs.skip-ssl-verification == 'false'
      shell: bash
      run: |
        echo "Importing complete CA certificate chain from SONAR_HOST_URL..."
        
        # Extract hostname and port from URL
        HOSTNAME=$(echo "${{ inputs.sonar-host-url }}" | sed -E 's|https?://([^/:]+).*|\1|')
        PORT=$(echo "${{ inputs.sonar-host-url }}" | sed -E 's|https?://[^/:]+:?([0-9]+)?.*|\1|')
        if [ -z "$PORT" ] || [ "$PORT" = "$HOSTNAME" ]; then
          PORT=443
        fi
        
        echo "Extracting complete certificate chain from: $HOSTNAME:$PORT"
        
        # Get the complete certificate chain (all certificates)
        echo -n | openssl s_client -connect "$HOSTNAME:$PORT" -servername "$HOSTNAME" -showcerts 2>/dev/null | \
          sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' > /tmp/sonar-cert-chain.crt
        
        if [ -f /tmp/sonar-cert-chain.crt ] && [ -s /tmp/sonar-cert-chain.crt ]; then
          echo "Certificate chain extracted successfully"
          
          # Count certificates in the chain
          CERT_COUNT=$(grep -c "BEGIN CERTIFICATE" /tmp/sonar-cert-chain.crt)
          echo "Found $CERT_COUNT certificate(s) in the chain"
          
          # Validate each certificate in the chain
          VALID_CERTS=0
          CERT_NUM=1
          
          # Split the chain into individual certificates and validate each
          awk '/-----BEGIN CERTIFICATE-----/{cert=""} {cert=cert $0 "\n"} /-----END CERTIFICATE-----/{print cert > "/tmp/cert_" NR ".crt"; cert=""}' /tmp/sonar-cert-chain.crt
          
          for cert_file in /tmp/cert_*.crt; do
            if [ -f "$cert_file" ]; then
              if openssl x509 -in "$cert_file" -text -noout > /dev/null 2>&1; then
                SUBJECT=$(openssl x509 -in "$cert_file" -noout -subject | sed 's/subject=//')
                ISSUER=$(openssl x509 -in "$cert_file" -noout -issuer | sed 's/issuer=//')
                echo "Certificate $CERT_NUM: Valid"
                echo "  Subject: $SUBJECT"
                echo "  Issuer: $ISSUER"
                VALID_CERTS=$((VALID_CERTS + 1))
              else
                echo "Certificate $CERT_NUM: Invalid format"
              fi
              CERT_NUM=$((CERT_NUM + 1))
            fi
          done
          
          if [ $VALID_CERTS -gt 0 ]; then
            echo "Successfully validated $VALID_CERTS out of $CERT_COUNT certificates"
            
            # Add the complete chain to system trust store
            sudo cp /tmp/sonar-cert-chain.crt /usr/local/share/ca-certificates/sonar-ca-chain.crt
            sudo update-ca-certificates
            echo "Certificate chain added to system trust store"
            
            # Set for Node.js (sonar-scanner)
            export NODE_EXTRA_CA_CERTS=/tmp/sonar-cert-chain.crt
            echo "NODE_EXTRA_CA_CERTS=/tmp/sonar-cert-chain.crt" >> $GITHUB_ENV
            echo "Node.js configured to use certificate chain"
            
            # Create comprehensive CA bundle for curl (API calls)
            # Include the extracted chain + system certificates
            cat /tmp/sonar-cert-chain.crt > /tmp/curl-ca-bundle.crt
            cat /etc/ssl/certs/ca-certificates.crt >> /tmp/curl-ca-bundle.crt
            echo "CURL_CA_BUNDLE=/tmp/curl-ca-bundle.crt" >> $GITHUB_ENV
            echo "Curl configured with comprehensive CA bundle"
            
            # Test certificate chain validation
            echo "Testing certificate chain validation..."
            if echo -n | openssl s_client -connect "$HOSTNAME:$PORT" -servername "$HOSTNAME" -CAfile /tmp/sonar-cert-chain.crt -verify_return_error 2>/dev/null; then
              echo "Certificate chain validation: SUCCESS"
            else
              echo "Certificate chain validation: WARNING (may still work)"
            fi
            
            echo "Complete CA certificate chain imported successfully"
            
            # Clean up individual certificate files
            rm -f /tmp/cert_*.crt
            
          else
            echo "Error: No valid certificates found in the chain"
            echo "Falling back to SSL verification bypass"
            export NODE_TLS_REJECT_UNAUTHORIZED=0
            echo "NODE_TLS_REJECT_UNAUTHORIZED=0" >> $GITHUB_ENV
          fi
        else
          echo "Warning: Could not extract certificate chain from $HOSTNAME:$PORT"
          echo "This may happen if:"
          echo "  - Server is not accessible from GitHub Actions runners"
          echo "  - Server uses non-standard SSL configuration"
          echo "  - Network connectivity issues"
          echo "Falling back to SSL verification bypass"
          export NODE_TLS_REJECT_UNAUTHORIZED=0
          echo "NODE_TLS_REJECT_UNAUTHORIZED=0" >> $GITHUB_ENV
        fi

    - name: Run SonarCloud Scan
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        # Handle SSL verification for self-signed certificates (fallback)
        if [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          export NODE_TLS_REJECT_UNAUTHORIZED=0
          echo "Warning: SSL certificate verification disabled (manual bypass)"
        fi
        
        # Show certificate setup status
        if [ -n "$NODE_EXTRA_CA_CERTS" ]; then
          echo "Using complete CA certificate chain: $NODE_EXTRA_CA_CERTS"
          if [ -f "$NODE_EXTRA_CA_CERTS" ]; then
            CERT_COUNT=$(grep -c "BEGIN CERTIFICATE" "$NODE_EXTRA_CA_CERTS" 2>/dev/null || echo "1")
            echo "Certificate chain contains: $CERT_COUNT certificate(s)"
          fi
        elif [ "$NODE_TLS_REJECT_UNAUTHORIZED" = "0" ]; then
          echo "Using SSL verification bypass"
        else
          echo "Using system certificate store"
        fi
        
        sonar-scanner \
          -Dsonar.projectKey=${{ inputs.project-key || github.repository }} \
          -Dsonar.organization=${{ inputs.organization }} \
          -Dsonar.host.url=${{ inputs.sonar-host-url }} \
          -Dsonar.token=${{ inputs.sonar-token }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Get Results
      id: results
      if: inputs.enabled == 'true'
      shell: bash
      run: |
        PROJECT_KEY="${{ inputs.project-key || github.repository }}"
        
        # Set curl SSL options
        CURL_OPTS="-s"
        if [ -n "$CURL_CA_BUNDLE" ]; then
          CURL_OPTS="$CURL_OPTS --cacert $CURL_CA_BUNDLE"
          echo "Using custom CA bundle for API calls: $CURL_CA_BUNDLE"
        elif [ "${{ inputs.skip-ssl-verification }}" = "true" ]; then
          CURL_OPTS="$CURL_OPTS -k"
          echo "Warning: Using insecure SSL for API calls"
        fi
        
        # Get quality gate
        GATE=$(curl $CURL_OPTS -u "${{ inputs.sonar-token }}:" \
          "${{ inputs.sonar-host-url }}/api/qualitygates/project_status?projectKey=${PROJECT_KEY//\//%2F}" | \
          jq -r '.projectStatus.status // "OK"')
        
        # Get metrics
        METRICS=$(curl $CURL_OPTS -u "${{ inputs.sonar-token }}:" \
          "${{ inputs.sonar-host-url }}/api/measures/component?component=${PROJECT_KEY//\//%2F}&metricKeys=coverage,blocker_violations,critical_violations")
        
        COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        BLOCKERS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="blocker_violations") | .value // "0"')
        CRITICALS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="critical_violations") | .value // "0"')
        
        # Check thresholds
        STATUS="PASSED"
        [[ "${COVERAGE%.*}" -lt "${{ inputs.min-code-coverage }}" ]] && STATUS="FAILED"
        [[ "$BLOCKERS" -gt "${{ inputs.max-blocker-issues }}" ]] && STATUS="FAILED"
        [[ "$CRITICALS" -gt "${{ inputs.max-critical-issues }}" ]] && STATUS="FAILED"
        [[ "$GATE" == "ERROR" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "SonarCloud: $STATUS | Coverage: ${COVERAGE}% | Issues: $CRITICALS critical, $BLOCKERS blocker"

    - name: Skip (Disabled)
      if: inputs.enabled != 'true'
      shell: bash
      run: echo "SonarCloud scan disabled"