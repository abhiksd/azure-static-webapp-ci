name: Intermediate Production-Grade CI/CD

on:
  push:
    branches: [main, develop, staging, preprod]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - pre-production
        - production
      enable_sonar:
        description: 'Enable SonarCloud analysis'
        type: boolean
        default: true
      enable_checkmarx:
        description: 'Enable Checkmarx security scanning'
        type: boolean
        default: true
      force_version:
        description: 'Override version (production only)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  
  # Security scanning controls
  ENABLE_SONAR: ${{ github.event.inputs.enable_sonar || vars.ENABLE_SONAR_SCAN || 'true' }}
  ENABLE_CHECKMARX: ${{ github.event.inputs.enable_checkmarx || vars.ENABLE_CHECKMARX_SCAN || 'true' }}
  
  # Quality gate thresholds
  MIN_CODE_COVERAGE: ${{ vars.MIN_CODE_COVERAGE || '80' }}
  MAX_CRITICAL_VULNERABILITIES: ${{ vars.MAX_CRITICAL_VULNERABILITIES || '0' }}
  MAX_HIGH_VULNERABILITIES: ${{ vars.MAX_HIGH_VULNERABILITIES || '2' }}
  
  # Common Azure Static Web Apps deployment parameters
  AZURE_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AZURE_ACTION: "upload"
  AZURE_APP_LOCATION: "/"
  AZURE_OUTPUT_LOCATION: "build"

permissions:
  contents: read
  id-token: write
  actions: read
  security-events: write
  pull-requests: write

jobs:
  # Production-grade deployment detection with all your requested features
  detect-deployment:
    name: 🔍 Deployment Strategy Detection
    runs-on: ubuntu-latest
    outputs:
      deploy-dev: ${{ steps.strategy.outputs.deploy-dev }}
      deploy-staging: ${{ steps.strategy.outputs.deploy-staging }}
      deploy-preprod: ${{ steps.strategy.outputs.deploy-preprod }}
      deploy-prod: ${{ steps.strategy.outputs.deploy-prod }}
      dev-version: ${{ steps.versions.outputs.dev-version }}
      staging-version: ${{ steps.versions.outputs.staging-version }}
      semantic-version: ${{ steps.versions.outputs.semantic-version }}
      deployment-risk: ${{ steps.strategy.outputs.deployment-risk }}
      require-approval: ${{ steps.strategy.outputs.require-approval }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Production-Grade Deployment Strategy
        id: strategy
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "🎯 INTERMEDIATE PRODUCTION-GRADE DEPLOYMENT DETECTION"
          echo "====================================================="
          echo "🔍 Context:"
          echo "  Branch/Tag: $BRANCH"
          echo "  Reference Type: $REF_TYPE"
          echo "  Event: $EVENT_NAME"
          echo "  Actor: ${{ github.actor }}"
          
          # Initialize deployment flags
          DEPLOY_DEV=false
          DEPLOY_STAGING=false
          DEPLOY_PREPROD=false
          DEPLOY_PROD=false
          DEPLOYMENT_RISK="LOW"
          REQUIRE_APPROVAL=false
          
          # Manual deployment with full control
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo ""
            echo "🎛️ MANUAL DEPLOYMENT REQUEST"
            TARGET_ENV="${{ github.event.inputs.environment }}"
            echo "  Target Environment: $TARGET_ENV"
            
            case "$TARGET_ENV" in
              "development")
                DEPLOY_DEV=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "staging")
                DEPLOY_STAGING=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "pre-production")
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="MEDIUM"
                REQUIRE_APPROVAL=true
                ;;
              "production")
                DEPLOY_PROD=true
                DEPLOYMENT_RISK="HIGH"
                REQUIRE_APPROVAL=true
                ;;
            esac
            
          # Production deployment: semantic version tags only (v1.2.3)
          elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo ""
            echo "🏭 PRODUCTION RELEASE TAG: $BRANCH"
            
            # Version analysis for risk assessment
            MAJOR=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
            MINOR=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')
            PATCH=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')
            
            echo "  📊 Version Analysis: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
            
            # Risk-based deployment strategy
            if [[ "$MAJOR" -gt 0 ]] && [[ "$MINOR" -eq 0 ]] && [[ "$PATCH" -eq 0 ]]; then
              echo "  🚨 MAJOR RELEASE - Breaking changes expected"
              DEPLOYMENT_RISK="CRITICAL"
              REQUIRE_APPROVAL=true
            elif [[ "$MINOR" -gt 0 ]] && [[ "$PATCH" -eq 0 ]]; then
              echo "  ⚠️ MINOR RELEASE - New features added"
              DEPLOYMENT_RISK="HIGH"
              REQUIRE_APPROVAL=true
            else
              echo "  🔧 PATCH RELEASE - Bug fixes and improvements"
              DEPLOYMENT_RISK="MEDIUM"
              REQUIRE_APPROVAL=${{ vars.REQUIRE_PATCH_APPROVAL || 'false' }}
            fi
            
            DEPLOY_PROD=true
            
          # Pre-production deployment: pre-release tags (v1.2.3-pre.*, v1.2.3-rc.*)
          elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-(pre|rc|alpha|beta) ]]; then
            echo ""
            echo "🎯 PRE-PRODUCTION RELEASE TAG: $BRANCH"
            
            PRERELEASE_TYPE=$(echo "$BRANCH" | sed -E 's/^v[0-9]+\.[0-9]+\.[0-9]+-([^.]+).*$/\1/')
            echo "  🏷️ Pre-release Type: $PRERELEASE_TYPE"
            
            case "$PRERELEASE_TYPE" in
              "rc")
                echo "  🚀 Release Candidate - Production-ready testing"
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="MEDIUM"
                ;;
              "pre")
                echo "  🧪 Pre-release - Feature validation"
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "alpha"|"beta")
                echo "  🔬 Alpha/Beta - Early testing"
                DEPLOY_STAGING=true
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="LOW"
                ;;
            esac
            
          # Branch-based deployments with production-grade logic
          elif [[ "$REF_TYPE" == "branch" ]]; then
            echo ""
            echo "🌿 BRANCH-BASED DEPLOYMENT"
            
            case "$BRANCH" in
              "main"|"master")
                echo "  🌟 MAIN BRANCH - Deploy to dev + staging"
                echo "    Production requires release tags for safety"
                DEPLOY_DEV=true
                DEPLOY_STAGING=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "develop"|"development")
                echo "  🔧 DEVELOP BRANCH - Active development integration"
                DEPLOY_DEV=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "staging")
                echo "  🧪 STAGING BRANCH - Pre-production testing"
                DEPLOY_STAGING=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "preprod"|"preproduction"|"pre-production")
                echo "  🎯 PRE-PRODUCTION BRANCH - Release preparation"
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="MEDIUM"
                ;;
              release/*)
                echo "  🚀 RELEASE BRANCH - Release candidate preparation"
                RELEASE_VERSION=$(echo "$BRANCH" | sed 's/release\///')
                echo "    Release Version: $RELEASE_VERSION"
                DEPLOY_STAGING=true
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="MEDIUM"
                ;;
              hotfix/*)
                echo "  🔥 HOTFIX BRANCH - Critical production fix"
                HOTFIX_VERSION=$(echo "$BRANCH" | sed 's/hotfix\///')
                echo "    Hotfix Version: $HOTFIX_VERSION"
                DEPLOY_DEV=true
                DEPLOY_STAGING=true
                DEPLOYMENT_RISK="HIGH"
                ;;
              feature/*|feat/*)
                echo "  ✨ FEATURE BRANCH - New feature development"
                FEATURE_NAME=$(echo "$BRANCH" | sed 's/feature\///' | sed 's/feat\///')
                echo "    Feature: $FEATURE_NAME"
                DEPLOY_DEV=true
                DEPLOYMENT_RISK="LOW"
                ;;
              *)
                echo "  🔍 UNKNOWN BRANCH - No automatic deployment"
                ;;
            esac
          fi
          
          # Output deployment decisions
          echo "deploy-dev=$DEPLOY_DEV" >> $GITHUB_OUTPUT
          echo "deploy-staging=$DEPLOY_STAGING" >> $GITHUB_OUTPUT
          echo "deploy-preprod=$DEPLOY_PREPROD" >> $GITHUB_OUTPUT
          echo "deploy-prod=$DEPLOY_PROD" >> $GITHUB_OUTPUT
          echo "deployment-risk=$DEPLOYMENT_RISK" >> $GITHUB_OUTPUT
          echo "require-approval=$REQUIRE_APPROVAL" >> $GITHUB_OUTPUT
          
          echo ""
          echo "🎯 DEPLOYMENT DECISION SUMMARY"
          echo "=============================="
          echo "📋 Target Environments:"
          echo "  🔧 Development: $DEPLOY_DEV"
          echo "  🧪 Staging: $DEPLOY_STAGING"
          echo "  🎯 Pre-Production: $DEPLOY_PREPROD"
          echo "  🏭 Production: $DEPLOY_PROD"
          echo ""
          echo "🛡️ Risk & Controls:"
          echo "  📊 Risk Level: $DEPLOYMENT_RISK"
          echo "  📋 Approval Required: $REQUIRE_APPROVAL"

      - name: 🏷️ Environment-Specific Version Generation
        id: versions
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          echo "🏷️ PRODUCTION-GRADE VERSION GENERATION"
          echo "======================================"
          
          # Development and Staging: Short SHA tags for rapid iteration
          DEV_VERSION="dev-${SHORT_SHA}-${TIMESTAMP}"
          STAGING_VERSION="staging-${SHORT_SHA}-${TIMESTAMP}"
          
          echo "📦 Short SHA Versions (Development/Staging):"
          echo "  Development: $DEV_VERSION"
          echo "  Staging: $STAGING_VERSION"
          
          # Pre-production and Production: Semantic versions
          if [[ "${{ github.event.inputs.force_version }}" != "" ]]; then
            SEMANTIC_VERSION="${{ github.event.inputs.force_version }}"
            echo "🎛️ Manual Version Override: $SEMANTIC_VERSION"
          elif [[ "$REF_TYPE" == "tag" ]]; then
            SEMANTIC_VERSION="$BRANCH"
            echo "🏷️ Tag-based Semantic Version: $SEMANTIC_VERSION"
          else
            # Auto-generate semantic version based on existing tags
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            if [[ "$LAST_TAG" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=${BASH_REMATCH[3]}
              PATCH=$((PATCH + 1))
              SEMANTIC_VERSION="v${MAJOR}.${MINOR}.${PATCH}-dev.${SHORT_SHA}"
            else
              SEMANTIC_VERSION="v1.0.0-dev.${SHORT_SHA}"
            fi
            echo "🔄 Auto-generated Semantic Version: $SEMANTIC_VERSION"
          fi
          
          echo "dev-version=$DEV_VERSION" >> $GITHUB_OUTPUT
          echo "staging-version=$STAGING_VERSION" >> $GITHUB_OUTPUT
          echo "semantic-version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 Version Summary:"
          echo "  🔧 Development: $DEV_VERSION"
          echo "  🧪 Staging: $STAGING_VERSION"
          echo "  🎯 Semantic (Pre-prod/Prod): $SEMANTIC_VERSION"

  # Comprehensive build and quality checks using composite actions
  quality-checks:
    name: 🔨 Build & Quality Checks
    runs-on: ubuntu-latest
    outputs:
      sonar-status: ${{ steps.sonar-analysis.outputs.status }}
      sonar-coverage: ${{ steps.sonar-analysis.outputs.coverage }}
      checkmarx-status: ${{ steps.checkmarx-scan.outputs.status }}
      checkmarx-critical: ${{ steps.checkmarx-scan.outputs.critical-count }}
      checkmarx-high: ${{ steps.checkmarx-scan.outputs.high-count }}
      security-status: ${{ steps.security-summary.outputs.status }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build & Test
        run: |
          echo "🔨 Building and testing..."
          npm run test -- --coverage --ci || true
          npm run lint || true
          npm run build || true
          echo "✅ Build completed"

      - name: SonarCloud Analysis
        id: sonar-analysis
        uses: ./.github/actions/sonar-analysis
        with:
          enabled: ${{ env.ENABLE_SONAR }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          organization: ${{ vars.SONAR_ORGANIZATION }}
          min-code-coverage: ${{ env.MIN_CODE_COVERAGE }}
          max-blocker-issues: ${{ vars.MAX_BLOCKER_ISSUES || '0' }}
          max-critical-issues: ${{ vars.MAX_CRITICAL_ISSUES || '0' }}

      - name: Checkmarx Security Scan
        id: checkmarx-scan
        uses: ./.github/actions/checkmarx-scan
        with:
          enabled: ${{ env.ENABLE_CHECKMARX }}
          checkmarx-url: ${{ secrets.CHECKMARX_URL }}
          checkmarx-username: ${{ secrets.CHECKMARX_USERNAME }}
          checkmarx-password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx-secret: ${{ secrets.CHECKMARX_SECRET }}
          tenant: ${{ secrets.CHECKMARX_TENANT }}
          scan-types: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
          max-critical: ${{ env.MAX_CRITICAL_VULNERABILITIES }}
          max-high: ${{ env.MAX_HIGH_VULNERABILITIES }}
          preset: ${{ vars.CHECKMARX_PRESET || 'Checkmarx Default' }}

      - name: Security Summary
        id: security-summary
        run: |
          SONAR="${{ steps.sonar-analysis.outputs.status || 'SKIPPED' }}"
          CHECKMARX="${{ steps.checkmarx-scan.outputs.status || 'SKIPPED' }}"
          echo "📊 Summary: SonarCloud=$SONAR | Checkmarx=$CHECKMARX"
          
          # Overall status
          STATUS="PASSED"
          [[ "$SONAR" == "FAILED" || "$CHECKMARX" == "FAILED" ]] && STATUS="FAILED"
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Overall: $STATUS"

  # Development deployment with short SHA versioning
  deploy-dev:
    name: 🔧 Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-dev == 'true'
    environment: development
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Development
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Success
        run: echo "✅ Dev deployed: ${{ needs.detect-deployment.outputs.dev-version }}"

  # Staging deployment with short SHA versioning
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-staging == 'true'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Staging
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Success
        run: echo "✅ Staging deployed: ${{ needs.detect-deployment.outputs.staging-version }}"

  # Pre-production deployment with semantic versioning
  deploy-preprod:
    name: 🎯 Deploy to Pre-Production
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-preprod == 'true'
    environment: pre-production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Pre-Production
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PREPROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Success
        run: echo "✅ Pre-prod deployed: ${{ needs.detect-deployment.outputs.semantic-version }}"

  # Production deployment with semantic versioning and enhanced validations
  deploy-prod:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-prod == 'true'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validation
        run: |
          echo "🏭 Production validation: ${{ needs.detect-deployment.outputs.semantic-version }}"
          [[ "${{ needs.quality-checks.outputs.security-status }}" == "FAILED" ]] && exit 1
          echo "✅ Validation passed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Production
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Create GitHub Release
        if: github.ref_type == 'tag'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.detect-deployment.outputs.semantic-version }}
          release_name: Release ${{ needs.detect-deployment.outputs.semantic-version }}
          body: |
            🚀 Production deployment successful
            
            **Version:** ${{ needs.detect-deployment.outputs.semantic-version }}
            **Risk Level:** ${{ needs.detect-deployment.outputs.deployment-risk }}
            **Quality Gate:** ${{ needs.quality-checks.outputs.sonar-quality-gate || 'N/A' }}
            **Security Status:** ${{ needs.quality-checks.outputs.security-scan-status }}
            
            **Deployment Details:**
            - Commit: ${{ github.sha }}
            - Actor: ${{ github.actor }}
            - URL: https://yourapp.azurestaticapps.net

      - name: Success
        run: echo "🎉 Production deployed: ${{ needs.detect-deployment.outputs.semantic-version }}"

  # Comprehensive deployment summary
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks, deploy-dev, deploy-staging, deploy-preprod, deploy-prod]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "📊 Deployment Summary:"
          echo "Deployments: Dev=${{ needs.deploy-dev.result || 'skip' }} | Staging=${{ needs.deploy-staging.result || 'skip' }} | Prod=${{ needs.deploy-prod.result || 'skip' }}"
          echo "Quality: Sonar=${{ needs.quality-checks.outputs.sonar-status || 'skip' }} | Checkmarx=${{ needs.quality-checks.outputs.checkmarx-status || 'skip' }}"
          echo "Version: ${{ needs.detect-deployment.outputs.semantic-version }}"