name: Intermediate Production-Grade CI/CD

on:
  push:
    branches: [main, develop, staging, preprod]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - pre-production
        - production
      enable_sonar:
        description: 'Enable SonarCloud analysis'
        type: boolean
        default: true
      enable_checkmarx:
        description: 'Enable Checkmarx security scanning'
        type: boolean
        default: true
      force_version:
        description: 'Override version (production only)'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  
  # Security scanning controls
  ENABLE_SONAR: ${{ github.event.inputs.enable_sonar || vars.ENABLE_SONAR_SCAN || 'true' }}
  ENABLE_CHECKMARX: ${{ github.event.inputs.enable_checkmarx || vars.ENABLE_CHECKMARX_SCAN || 'true' }}
  
  # SonarQube/SonarCloud configuration
  SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}
  SONAR_SKIP_SSL_VERIFICATION: ${{ vars.SONAR_SKIP_SSL_VERIFICATION || 'false' }}
  
  # Quality gate thresholds
  MIN_CODE_COVERAGE: ${{ vars.MIN_CODE_COVERAGE || '80' }}
  MAX_CRITICAL_VULNERABILITIES: ${{ vars.MAX_CRITICAL_VULNERABILITIES || '0' }}
  MAX_HIGH_VULNERABILITIES: ${{ vars.MAX_HIGH_VULNERABILITIES || '2' }}
  
  # Common Azure Static Web Apps deployment parameters
  AZURE_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AZURE_ACTION: "upload"
  AZURE_APP_LOCATION: "/"
  AZURE_OUTPUT_LOCATION: "build"

permissions:
  contents: read
  id-token: write
  actions: read
  security-events: write
  pull-requests: write

jobs:
  detect-deployment:
    name: Deployment Strategy Detection
    runs-on: ubuntu-latest
    outputs:
      deploy-dev: ${{ steps.strategy.outputs.deploy-dev }}
      deploy-staging: ${{ steps.strategy.outputs.deploy-staging }}
      deploy-preprod: ${{ steps.strategy.outputs.deploy-preprod }}
      deploy-prod: ${{ steps.strategy.outputs.deploy-prod }}
      dev-version: ${{ steps.versions.outputs.dev-version }}
      staging-version: ${{ steps.versions.outputs.staging-version }}
      semantic-version: ${{ steps.versions.outputs.semantic-version }}
      deployment-risk: ${{ steps.strategy.outputs.deployment-risk }}
      require-approval: ${{ steps.strategy.outputs.require-approval }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deployment Strategy
        id: strategy
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "Deployment Detection: $BRANCH ($REF_TYPE, $EVENT_NAME)"
          
          # Initialize deployment flags
          DEPLOY_DEV=false
          DEPLOY_STAGING=false
          DEPLOY_PREPROD=false
          DEPLOY_PROD=false
          DEPLOYMENT_RISK="LOW"
          REQUIRE_APPROVAL=false
          
          # Manual deployment
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            TARGET_ENV="${{ github.event.inputs.environment }}"
            echo "Manual deployment to: $TARGET_ENV"
            
            case "$TARGET_ENV" in
              "development")
                DEPLOY_DEV=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "staging")
                DEPLOY_STAGING=true
                DEPLOYMENT_RISK="LOW"
                ;;
              "pre-production")
                DEPLOY_PREPROD=true
                DEPLOYMENT_RISK="MEDIUM"
                REQUIRE_APPROVAL=true
                ;;
              "production")
                DEPLOY_PROD=true
                DEPLOYMENT_RISK="HIGH"
                REQUIRE_APPROVAL=true
                ;;
            esac
            
          # Production deployment: semantic version tags only (v1.2.3)
          elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PRODUCTION RELEASE TAG: $BRANCH"
            
            # Version analysis for risk assessment
            MAJOR=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
            MINOR=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')
            PATCH=$(echo "$BRANCH" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')
            
            echo "Version Analysis: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
            
                         # Risk-based deployment strategy
             if [[ "$MAJOR" -gt 0 ]] && [[ "$MINOR" -eq 0 ]] && [[ "$PATCH" -eq 0 ]]; then
               DEPLOYMENT_RISK="CRITICAL"
               REQUIRE_APPROVAL=true
             elif [[ "$MINOR" -gt 0 ]] && [[ "$PATCH" -eq 0 ]]; then
               DEPLOYMENT_RISK="HIGH"
               REQUIRE_APPROVAL=true
             else
               DEPLOYMENT_RISK="MEDIUM"
               REQUIRE_APPROVAL=${{ vars.REQUIRE_PATCH_APPROVAL || 'false' }}
             fi
            
            DEPLOY_PROD=true
            
                     # Pre-production deployment: pre-release tags
           elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-(pre|rc|alpha|beta) ]]; then
             PRERELEASE_TYPE=$(echo "$BRANCH" | sed -E 's/^v[0-9]+\.[0-9]+\.[0-9]+-([^.]+).*$/\1/')
             echo "Pre-release: $BRANCH ($PRERELEASE_TYPE)"
             
             case "$PRERELEASE_TYPE" in
               "rc")
                 DEPLOY_PREPROD=true
                 DEPLOYMENT_RISK="MEDIUM"
                 ;;
               "pre")
                 DEPLOY_PREPROD=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
               "alpha"|"beta")
                 DEPLOY_STAGING=true
                 DEPLOY_PREPROD=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
             esac
            
                     # Branch-based deployments
           elif [[ "$REF_TYPE" == "branch" ]]; then
            
            case "$BRANCH" in
                             "main"|"master")
                 DEPLOY_DEV=true
                 DEPLOY_STAGING=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
               "develop"|"development")
                 DEPLOY_DEV=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
               "staging")
                 DEPLOY_STAGING=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
               "preprod"|"pre-production")
                 DEPLOY_PREPROD=true
                 DEPLOYMENT_RISK="MEDIUM"
                 ;;
               release/*)
                 DEPLOY_STAGING=true
                 DEPLOY_PREPROD=true
                 DEPLOYMENT_RISK="MEDIUM"
                 ;;
               hotfix/*)
                 DEPLOY_DEV=true
                 DEPLOY_STAGING=true
                 DEPLOYMENT_RISK="HIGH"
                 REQUIRE_APPROVAL=true
                 ;;
               feature/*)
                 DEPLOY_DEV=true
                 DEPLOYMENT_RISK="LOW"
                 ;;
               *)
                 DEPLOYMENT_RISK="LOW"
                 ;;
            esac
          fi
          
                     # Output deployment decision
           echo "Deploy: dev=$DEPLOY_DEV, staging=$DEPLOY_STAGING, preprod=$DEPLOY_PREPROD, prod=$DEPLOY_PROD (risk=$DEPLOYMENT_RISK)"
          
          # Set outputs
          echo "deploy-dev=$DEPLOY_DEV" >> $GITHUB_OUTPUT
          echo "deploy-staging=$DEPLOY_STAGING" >> $GITHUB_OUTPUT
          echo "deploy-preprod=$DEPLOY_PREPROD" >> $GITHUB_OUTPUT
          echo "deploy-prod=$DEPLOY_PROD" >> $GITHUB_OUTPUT
          echo "deployment-risk=$DEPLOYMENT_RISK" >> $GITHUB_OUTPUT
          echo "require-approval=$REQUIRE_APPROVAL" >> $GITHUB_OUTPUT

      - name: Version Generation
        id: versions
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          
                     # Development and Staging versions
           DEV_VERSION="dev-${SHORT_SHA}-${TIMESTAMP}"
           STAGING_VERSION="staging-${SHORT_SHA}-${TIMESTAMP}"
          
                     # Semantic versions for pre-prod and production
           if [[ "${{ github.event.inputs.force_version }}" != "" ]]; then
             SEMANTIC_VERSION="${{ github.event.inputs.force_version }}"
           elif [[ "$REF_TYPE" == "tag" ]]; then
             SEMANTIC_VERSION="$BRANCH"
           else
             # Auto-generate semantic version
             LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
             if [[ "$LAST_TAG" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
               MAJOR=${BASH_REMATCH[1]}
               MINOR=${BASH_REMATCH[2]}
               PATCH=${BASH_REMATCH[3]}
               PATCH=$((PATCH + 1))
               SEMANTIC_VERSION="v${MAJOR}.${MINOR}.${PATCH}-dev.${SHORT_SHA}"
             else
               SEMANTIC_VERSION="v1.0.0-dev.${SHORT_SHA}"
             fi
           fi
          
                     echo "dev-version=$DEV_VERSION" >> $GITHUB_OUTPUT
           echo "staging-version=$STAGING_VERSION" >> $GITHUB_OUTPUT
           echo "semantic-version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
           echo "Generated versions: dev=$DEV_VERSION, staging=$STAGING_VERSION, semantic=$SEMANTIC_VERSION"

  quality-checks:
    name: Build & Quality Checks
    runs-on: ubuntu-latest
    outputs:
      sonar-status: ${{ steps.sonar-analysis.outputs.status }}
      sonar-coverage: ${{ steps.sonar-analysis.outputs.coverage }}
      checkmarx-status: ${{ steps.checkmarx-scan.outputs.status }}
      checkmarx-critical: ${{ steps.checkmarx-scan.outputs.critical-count }}
      checkmarx-high: ${{ steps.checkmarx-scan.outputs.high-count }}
      security-status: ${{ steps.security-summary.outputs.status }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build & Test
        run: |
          echo "Building and testing..."
          npm run test -- --coverage --ci || true
          npm run lint || true
          npm run build || true
          echo "Build completed"

      - name: SonarCloud Analysis
        id: sonar-analysis
        uses: ./.github/actions/sonar-analysis
        with:
          enabled: ${{ env.ENABLE_SONAR }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          organization: ${{ vars.SONAR_ORGANIZATION }}
          sonar-host-url: ${{ env.SONAR_HOST_URL }}
          skip-ssl-verification: ${{ env.SONAR_SKIP_SSL_VERIFICATION }}
          min-code-coverage: ${{ env.MIN_CODE_COVERAGE }}
          max-blocker-issues: ${{ vars.MAX_BLOCKER_ISSUES || '0' }}
          max-critical-issues: ${{ vars.MAX_CRITICAL_ISSUES || '0' }}

      - name: Debug Checkmarx Configuration
        if: env.ENABLE_CHECKMARX == 'true'
        run: |
          echo "=== Checkmarx Debug Information ==="
          echo "ENABLE_CHECKMARX: ${{ env.ENABLE_CHECKMARX }}"
          echo "CHECKMARX_BASE_URI: ${{ secrets.CHECKMARX_BASE_URI || 'https://ast.checkmarx.net' }}"
          echo "CHECKMARX_CLIENT_ID: ${CHECKMARX_CLIENT_ID:0:8}$([ ${#CHECKMARX_CLIENT_ID} -gt 8 ] && echo '...' || echo '')"
          echo "CHECKMARX_SECRET: ${CHECKMARX_SECRET:0:8}$([ ${#CHECKMARX_SECRET} -gt 8 ] && echo '...' || echo '')"
          echo "CHECKMARX_TENANT: $CHECKMARX_TENANT"
          echo "SCAN_TYPES: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}"
          echo "=== End Debug ==="
        env:
          CHECKMARX_CLIENT_ID: ${{ secrets.CHECKMARX_CLIENT_ID }}
          CHECKMARX_SECRET: ${{ secrets.CHECKMARX_SECRET }}
          CHECKMARX_TENANT: ${{ secrets.CHECKMARX_TENANT }}

      - name: Checkmarx Security Scan
        id: checkmarx-scan
        uses: ./.github/actions/checkmarx-scan
        with:
          enabled: ${{ env.ENABLE_CHECKMARX }}
          base-uri: ${{ secrets.CHECKMARX_BASE_URI || 'https://ast.checkmarx.net' }}
          checkmarx-client-id: ${{ secrets.CHECKMARX_CLIENT_ID }}
          checkmarx-secret: ${{ secrets.CHECKMARX_SECRET }}
          tenant: ${{ secrets.CHECKMARX_TENANT }}
          scan-types: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
          max-critical: ${{ env.MAX_CRITICAL_VULNERABILITIES }}
          max-high: ${{ env.MAX_HIGH_VULNERABILITIES }}
          preset: ${{ vars.CHECKMARX_PRESET || 'Checkmarx Default' }}

      - name: Security Summary
        id: security-summary
        run: |
          SONAR="${{ steps.sonar-analysis.outputs.status || 'SKIPPED' }}"
          CHECKMARX="${{ steps.checkmarx-scan.outputs.status || 'SKIPPED' }}"
          echo "Summary: SonarCloud=$SONAR | Checkmarx=$CHECKMARX"
          
          # Overall status
          STATUS="PASSED"
          [[ "$SONAR" == "FAILED" || "$CHECKMARX" == "FAILED" ]] && STATUS="FAILED"
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Overall: $STATUS"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-dev == 'true'
    environment: development
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Development
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ env.AZURE_REPO_TOKEN }}
          action: ${{ env.AZURE_ACTION }}
          app_location: ${{ env.AZURE_APP_LOCATION }}
          output_location: ${{ env.AZURE_OUTPUT_LOCATION }}

      - name: Success
        run: echo 'Dev deployed:' ${{ needs.detect-deployment.outputs.dev-version }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-staging == 'true'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Staging
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          repo_token: ${{ env.AZURE_REPO_TOKEN }}
          action: ${{ env.AZURE_ACTION }}
          app_location: ${{ env.AZURE_APP_LOCATION }}
          output_location: ${{ env.AZURE_OUTPUT_LOCATION }}

      - name: Success
        run: echo 'Staging deployed:' ${{ needs.detect-deployment.outputs.staging-version }}

  deploy-preprod:
    name: Deploy to Pre-Production
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-preprod == 'true'
    environment: pre-production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Pre-Production
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PREPROD }}
          repo_token: ${{ env.AZURE_REPO_TOKEN }}
          action: ${{ env.AZURE_ACTION }}
          app_location: ${{ env.AZURE_APP_LOCATION }}
          output_location: ${{ env.AZURE_OUTPUT_LOCATION }}

      - name: Success
        run: echo 'Pre-prod deployed:' ${{ needs.detect-deployment.outputs.semantic-version }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks]
    if: needs.detect-deployment.outputs.deploy-prod == 'true'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validation
        run: |
          echo "Production validation: ${{ needs.detect-deployment.outputs.semantic-version }}"
          [[ "${{ needs.quality-checks.outputs.security-status }}" == "FAILED" ]] && exit 1
          echo "Validation passed"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build
        run: npm ci && npm run build

      - name: Deploy to Production
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          repo_token: ${{ env.AZURE_REPO_TOKEN }}
          action: ${{ env.AZURE_ACTION }}
          app_location: ${{ env.AZURE_APP_LOCATION }}
          output_location: ${{ env.AZURE_OUTPUT_LOCATION }}

      - name: Create GitHub Release
        if: github.ref_type == 'tag'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - Automated release from tag ${{ github.ref }}
            - Deployed to production environment
            - Version: ${{ needs.detect-deployment.outputs.semantic-version }}
          draft: false
          prerelease: false

      - name: Success
        run: echo 'Production deployed:' ${{ needs.detect-deployment.outputs.semantic-version }}

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-deployment, quality-checks, deploy-dev, deploy-staging, deploy-preprod, deploy-prod]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "Deployment Summary:"
          echo "Deployments: Dev=${{ needs.deploy-dev.result || 'skip' }} | Staging=${{ needs.deploy-staging.result || 'skip' }} | Prod=${{ needs.deploy-prod.result || 'skip' }}"
          echo "Quality: Sonar=${{ needs.quality-checks.outputs.sonar-status || 'skip' }} | Checkmarx=${{ needs.quality-checks.outputs.checkmarx-status || 'skip' }}"
          echo "Version: ${{ needs.detect-deployment.outputs.semantic-version }}"