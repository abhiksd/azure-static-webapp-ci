name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop, 'release/**' ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'
  AZURE_STATIC_WEB_APPS_API_TOKEN_DEV: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
  AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
  AZURE_STATIC_WEB_APPS_API_TOKEN_PROD: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}

jobs:
  # PR Validation Job
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|ts|tsx|jsx|css|scss|html|json)$' > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Run linting and tests
        run: |
          npm run lint
          npm run test:coverage

      - name: Security Scan
        uses: ./.github/actions/security-scan
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          checkmarx-username: ${{ secrets.CHECKMARX_USERNAME }}
          checkmarx-password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx-server: ${{ secrets.CHECKMARX_SERVER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Regression Tests
        run: |
          npm run test:e2e

  # Development Deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ secrets.AZURE_KEYVAULT_NAME_DEV }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Deploy to Azure Static Web Apps
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          environment: development
          version: ${{ github.sha }}

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run tests
        run: |
          npm run test:coverage
          npm run test:e2e

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ secrets.AZURE_KEYVAULT_NAME_STAGING }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Deploy to Azure Static Web Apps
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          environment: staging
          version: ${{ github.sha }}

  # Release Branch Deployment (Pre-production)
  deploy-release:
    name: Deploy Release Branch
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push'
    environment: pre-production
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Extract release version
        id: extract-version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          RELEASE_VERSION=${BRANCH_NAME#release/}
          echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $RELEASE_VERSION"

      - name: Run full test suite
        run: |
          npm run test:coverage
          npm run test:e2e
          npm run test:performance

      - name: Security Scan
        uses: ./.github/actions/security-scan
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          checkmarx-username: ${{ secrets.CHECKMARX_USERNAME }}
          checkmarx-password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx-server: ${{ secrets.CHECKMARX_SERVER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ secrets.AZURE_KEYVAULT_NAME_PROD }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Deploy to Azure Static Web Apps (Release)
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          environment: pre-production
          version: ${{ steps.extract-version.outputs.release-version }}

  # Production Deployment (Semantic Tags)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run full test suite
        run: |
          npm run test:coverage
          npm run test:e2e
          npm run test:performance

      - name: Security Scan
        uses: ./.github/actions/security-scan
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          checkmarx-username: ${{ secrets.CHECKMARX_USERNAME }}
          checkmarx-password: ${{ secrets.CHECKMARX_PASSWORD }}
          checkmarx-server: ${{ secrets.CHECKMARX_SERVER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ secrets.AZURE_KEYVAULT_NAME_PROD }}
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Deploy to Azure Static Web Apps
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          environment: production
          version: ${{ github.ref_name }}

  # Cleanup job for failed deployments
  cleanup:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-dev, deploy-staging, deploy-release, deploy-prod]
    steps:
      - name: Cleanup resources
        run: |
          echo "Cleaning up failed deployment resources..."
          # Add cleanup logic here