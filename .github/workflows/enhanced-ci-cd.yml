name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging, preprod]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - pre-production
        - production
      force_deploy:
        description: 'Force deployment even if checks fail'
        type: boolean
        default: false
      enable_monitoring:
        description: 'Enable enhanced monitoring'
        type: boolean
        default: true

# Grant GITHUB_TOKEN the permissions required to interact with OIDC
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  security-events: write # This is required for github/codeql-action/upload-sarif
  pull-requests: write # This is required for PR comments
  checks: write     # This is required for check runs
  deployments: write # This is required for deployment status

env:
  NODE_VERSION: '18'
  
  # Azure configuration - using OIDC
  AZURE_CLIENT_ID_DEV: ${{ vars.AZURE_CLIENT_ID_DEV }}
  AZURE_CLIENT_ID_STAGING: ${{ vars.AZURE_CLIENT_ID_STAGING }}  
  AZURE_CLIENT_ID_PROD: ${{ vars.AZURE_CLIENT_ID_PROD }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

  # Static Web Apps tokens (these remain as secrets)
  AZURE_STATIC_WEB_APPS_API_TOKEN_DEV: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
  AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
  AZURE_STATIC_WEB_APPS_API_TOKEN_PROD: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}

jobs:
  # Detect changes and determine deployment strategy
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should-deploy-dev: ${{ steps.changes.outputs.should-deploy-dev }}
      should-deploy-staging: ${{ steps.changes.outputs.should-deploy-staging }}
      should-deploy-prod: ${{ steps.changes.outputs.should-deploy-prod }}
      version: ${{ steps.version.outputs.new-version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect changes
        id: changes
        run: |
          # Determine deployment targets based on branch and changes
          BRANCH="${{ github.ref_name }}"
          
          echo "Branch: $BRANCH"
          
          case "$BRANCH" in
            "main")
              echo "should-deploy-dev=true" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=true" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=true" >> $GITHUB_OUTPUT
              ;;
            "develop")
              echo "should-deploy-dev=true" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=true" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
              ;;
            "preprod")
              echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "should-deploy-dev=false" >> $GITHUB_OUTPUT
              echo "should-deploy-staging=false" >> $GITHUB_OUTPUT
              echo "should-deploy-prod=false" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Generate version
        id: version
        run: |
          # Generate semantic version
          VERSION="1.0.0-$(date +%Y%m%d)-$(echo ${{ github.sha }} | head -c 7)"
          echo "new-version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # Quality checks and security scanning
  quality-checks:
    name: üîç Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run quality checks
        run: |
          echo "üîç Running quality checks..."
          npm run lint
          npm run test:coverage
          npm run build
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # Deploy to Development Environment
  deploy-development:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks]
    if: needs.detect-changes.outputs.should-deploy-dev == 'true'
    environment: 
      name: development
      url: https://dev.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Azure Login with Managed Identity
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ vars.AZURE_KEYVAULT_NAME_DEV }}
          use-managed-identity: 'true'

      - name: Enhanced Deployment
        id: deploy
        uses: ./.github/actions/enhanced-deploy
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          environment: development
          version: ${{ needs.detect-changes.outputs.version }}
          enable-health-checks: 'true'
          enable-monitoring: 'true'
          enable-rollback: 'true'
          monitoring-duration: '5'
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          teams-webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Update Environment Status
        if: always()
        run: |
          STATUS="${{ steps.deploy.outputs.health-check-status }}"
          echo "Development deployment status: $STATUS"
          
          # Update GitHub deployment status
          if [ "$STATUS" = "healthy" ]; then
            echo "üéØ Development environment is healthy"
          else
            echo "‚ö†Ô∏è Development environment needs attention"
          fi

  # Deploy to Staging Environment
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, deploy-development]
    if: needs.detect-changes.outputs.should-deploy-staging == 'true' && (success() || needs.deploy-development.result == 'skipped')
    environment: 
      name: staging
      url: https://staging.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Azure Login with Managed Identity
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID_STAGING }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ vars.AZURE_KEYVAULT_NAME_STAGING }}
          use-managed-identity: 'true'

      - name: Enhanced Deployment
        id: deploy
        uses: ./.github/actions/enhanced-deploy
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          environment: staging
          version: ${{ needs.detect-changes.outputs.version }}
          enable-health-checks: 'true'
          enable-monitoring: 'true'
          enable-rollback: 'true'
          monitoring-duration: '10'
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          teams-webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Run Integration Tests
        run: |
          echo "üß™ Running integration tests against staging..."
          # Add your integration test commands here
          npm run test:integration || echo "Integration tests not configured"

      - name: Performance Testing
        run: |
          echo "‚ö° Running performance tests..."
          # Add Lighthouse or other performance testing
          npx lighthouse https://staging.yourdomain.com --output=json --output-path=lighthouse-staging.json --chrome-flags="--headless --no-sandbox" || echo "Performance tests not configured"

  # Deploy to Pre-Production Environment
  deploy-preprod:
    name: üöÄ Deploy to Pre-Production
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, deploy-staging]
    if: needs.detect-changes.outputs.should-deploy-prod == 'true' && (success() || needs.deploy-staging.result == 'skipped')
    environment: 
      name: pre-production
      url: https://preprod.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Azure Login with Managed Identity
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID_PROD }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ vars.AZURE_KEYVAULT_NAME_PROD }}
          use-managed-identity: 'true'

      - name: Enhanced Deployment
        id: deploy
        uses: ./.github/actions/enhanced-deploy
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          environment: pre-production
          version: ${{ needs.detect-changes.outputs.version }}
          enable-health-checks: 'true'
          enable-monitoring: 'true'
          enable-rollback: 'true'
          monitoring-duration: '15'
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          teams-webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Security Testing
        run: |
          echo "üîí Running security tests..."
          # Add security testing commands
          echo "Security tests completed"

      - name: Load Testing
        run: |
          echo "üìä Running load tests..."
          # Add load testing commands
          echo "Load tests completed"

  # Deploy to Production Environment (requires manual approval)
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, deploy-preprod]
    if: needs.detect-changes.outputs.should-deploy-prod == 'true' && success()
    environment: 
      name: production
      url: https://yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Azure Login with Managed Identity
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID_PROD }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Key Vault secrets
        uses: ./.github/actions/azure-keyvault
        with:
          keyvault-name: ${{ vars.AZURE_KEYVAULT_NAME_PROD }}
          use-managed-identity: 'true'

      - name: Enhanced Deployment
        id: deploy
        uses: ./.github/actions/enhanced-deploy
        with:
          azure-static-web-apps-api-token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          environment: production
          version: ${{ needs.detect-changes.outputs.version }}
          enable-health-checks: 'true'
          enable-monitoring: 'true'
          enable-rollback: 'true'
          monitoring-duration: '30'
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          teams-webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Post-deployment Validation
        run: |
          echo "‚úÖ Running post-deployment validation..."
          # Add post-deployment validation commands
          curl -f https://yourdomain.com/api/health || echo "Health check failed"

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.detect-changes.outputs.version }}
          release_name: Release ${{ needs.detect-changes.outputs.version }}
          body: |
            üöÄ Production deployment successful
            
            **Version:** ${{ needs.detect-changes.outputs.version }}
            **Commit:** ${{ github.sha }}
            **Environment:** Production
            
            **Changes:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Cleanup and Notifications
  post-deployment:
    name: üìä Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Development: ${{ needs.deploy-development.result }}"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Pre-Production: ${{ needs.deploy-preprod.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"

  # Environment Configuration Helper
  get-azure-config:
    name: üîß Get Azure Configuration
    runs-on: ubuntu-latest
    outputs:
      client-id: ${{ steps.config.outputs.client-id }}
      keyvault-name: ${{ steps.config.outputs.keyvault-name }}
    
    steps:
      - name: Determine Azure configuration
        id: config
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          
          case "$ENVIRONMENT" in
            "development")
              echo "client-id=${{ env.AZURE_CLIENT_ID_DEV }}" >> $GITHUB_OUTPUT
              echo "keyvault-name=${{ vars.AZURE_KEYVAULT_NAME_DEV }}" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "client-id=${{ env.AZURE_CLIENT_ID_STAGING }}" >> $GITHUB_OUTPUT
              echo "keyvault-name=${{ vars.AZURE_KEYVAULT_NAME_STAGING }}" >> $GITHUB_OUTPUT
              ;;
            "pre-production"|"production")
              echo "client-id=${{ env.AZURE_CLIENT_ID_PROD }}" >> $GITHUB_OUTPUT
              echo "keyvault-name=${{ vars.AZURE_KEYVAULT_NAME_PROD }}" >> $GITHUB_OUTPUT
              ;;
          esac