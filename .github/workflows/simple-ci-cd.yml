name: Simple CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      enable_security_scans:
        description: 'Enable security scans'
        type: boolean
        default: true

env:
  NODE_VERSION: '18'
  
  # Simple security scan controls
  ENABLE_SONAR: ${{ vars.ENABLE_SONAR || 'true' }}
  ENABLE_CHECKMARX: ${{ vars.ENABLE_CHECKMARX || 'false' }}

permissions:
  contents: read
  id-token: write
  actions: read
  security-events: write

jobs:
  # Simple deployment detection
  detect-deployment:
    name:  Detect Deployment
    runs-on: ubuntu-latest
    outputs:
      deploy-dev: ${{ steps.check.outputs.deploy-dev }}
      deploy-staging: ${{ steps.check.outputs.deploy-staging }}
      deploy-prod: ${{ steps.check.outputs.deploy-prod }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simple Deployment Logic
        id: check
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          EVENT="${{ github.event_name }}"
          
          echo "Simple Deployment Detection"
          echo "Branch/Tag: $BRANCH"
          echo "Type: $REF_TYPE"
          echo "Event: $EVENT"
          
          # Default: no deployment
          DEPLOY_DEV=false
          DEPLOY_STAGING=false
          DEPLOY_PROD=false
          
          # Manual deployment
          if [[ "$EVENT" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.environment }}" in
              "development") DEPLOY_DEV=true ;;
              "staging") DEPLOY_STAGING=true ;;
              "production") DEPLOY_PROD=true ;;
            esac
          # Production tags (v1.2.3)
          elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Production release: $BRANCH"
            DEPLOY_PROD=true
          # Pre-release tags (v1.2.3-anything)
          elif [[ "$REF_TYPE" == "tag" ]] && [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+- ]]; then
            echo "Pre-release: $BRANCH"
            DEPLOY_STAGING=true
          # Branch deployments
          elif [[ "$REF_TYPE" == "branch" ]]; then
            case "$BRANCH" in
              "main") 
                DEPLOY_DEV=true
                DEPLOY_STAGING=true
                ;;
              "develop") 
                DEPLOY_DEV=true
                ;;
              "staging") 
                DEPLOY_STAGING=true
                ;;
            esac
          fi
          
          echo "deploy-dev=$DEPLOY_DEV" >> $GITHUB_OUTPUT
          echo "deploy-staging=$DEPLOY_STAGING" >> $GITHUB_OUTPUT
          echo "deploy-prod=$DEPLOY_PROD" >> $GITHUB_OUTPUT
          
          echo "Deployment Plan:"
          echo " Development: $DEPLOY_DEV"
          echo " Staging: $DEPLOY_STAGING"
          echo " Production: $DEPLOY_PROD"

      - name: Generate Version
        id: version
        run: |
          BRANCH="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"
          SHORT_SHA=$(echo ${{ github.sha }} | head -c 7)
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          if [[ "$REF_TYPE" == "tag" ]]; then
            # Use tag as version
            VERSION="$BRANCH"
          else
            # Use short SHA for branches
            VERSION="${BRANCH}-${SHORT_SHA}-${TIMESTAMP}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # Simple build and test
  build-and-test:
    name:  Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          echo "Running tests..."
          npm run test || echo "No tests configured"
          npm run lint || echo "No linting configured"
          npm run build || echo "No build configured"

      - name: SonarCloud Scan
        if: env.ENABLE_SONAR == 'true' && (github.event.inputs.enable_security_scans != 'false')
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Checkmarx Security Scan
        if: env.ENABLE_CHECKMARX == 'true' && (github.event.inputs.enable_security_scans != 'false')
        run: |
          echo "Running Checkmarx scan..."
          echo "Checkmarx scan would run here with configured settings"
          # Add actual Checkmarx scan if needed

  # Development deployment
  deploy-dev:
    name:  Deploy to Development
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test]
    if: needs.detect-deployment.outputs.deploy-dev == 'true'
    environment: development
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build for deployment
        run: |
          npm ci
          npm run build || echo "No build script configured"

      - name: Deploy to Development
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Deployment Success
        run: |
          echo "Development deployment successful!"
          echo "Version: ${{ needs.detect-deployment.outputs.version }}"
          echo "URL: https://dev-yourapp.azurestaticapps.net"

  # Staging deployment
  deploy-staging:
    name:  Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test]
    if: needs.detect-deployment.outputs.deploy-staging == 'true'
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build for deployment
        run: |
          npm ci
          npm run build || echo "No build script configured"

      - name: Deploy to Staging
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Deployment Success
        run: |
          echo "Staging deployment successful!"
          echo "Version: ${{ needs.detect-deployment.outputs.version }}"
          echo "URL: https://staging-yourapp.azurestaticapps.net"

  # Production deployment
  deploy-prod:
    name:  Deploy to Production
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test]
    if: needs.detect-deployment.outputs.deploy-prod == 'true'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build for deployment
        run: |
          npm ci
          npm run build || echo "No build script configured"

      - name: Deploy to Production
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROD }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "build"

      - name: Create GitHub Release
        if: github.ref_type == 'tag'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.detect-deployment.outputs.version }}
          release_name: Release ${{ needs.detect-deployment.outputs.version }}
          body: |
            Production deployment successful
            
            **Version:** ${{ needs.detect-deployment.outputs.version }}
            **Deployed:** $(date)
            **URL:** https://yourapp.azurestaticapps.net

      - name: Production Success
        run: |
          echo "Production deployment successful!"
                      echo "Version: ${{ needs.detect-deployment.outputs.version }}"
            echo "URL: https://yourapp.azurestaticapps.net"

  # Summary
  deployment-summary:
    name:  Summary
    runs-on: ubuntu-latest
    needs: [detect-deployment, deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "Deployment Summary"
          echo "===================="
          echo "Version: ${{ needs.detect-deployment.outputs.version }}"
          echo ""
          echo "Results:"
          echo "  Development: ${{ needs.deploy-dev.result || 'skipped' }}"
          echo "  Staging: ${{ needs.deploy-staging.result || 'skipped' }}"
          echo "  Production: ${{ needs.deploy-prod.result || 'skipped' }}"