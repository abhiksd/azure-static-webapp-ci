name: PR Protection & Security Gate

on:
  pull_request:
    branches: [ main, develop, 'release/**' ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to run checks on'
        required: true
        type: string
      enable_sonar:
        description: 'Enable SonarCloud analysis'
        required: false
        default: true
        type: boolean
      enable_checkmarx:
        description: 'Enable Checkmarx security scan'
        required: false
        default: true
        type: boolean
      force_security_gate:
        description: 'Force security gate (fail on any security issues)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  
  # Security scan configuration - can be overridden by repository variables
  ENABLE_SONAR: ${{ vars.ENABLE_SONAR_SCAN || 'true' }}
  ENABLE_CHECKMARX: ${{ vars.ENABLE_CHECKMARX_SCAN || 'true' }}
  ENABLE_DEPENDENCY_SCAN: ${{ vars.ENABLE_DEPENDENCY_SCAN || 'true' }}
  ENABLE_LICENSE_SCAN: ${{ vars.ENABLE_LICENSE_SCAN || 'false' }}
  SECURITY_GATE_ENABLED: ${{ vars.SECURITY_GATE_ENABLED || 'true' }}
  
  # Checkmarx scan configuration
  CHECKMARX_SCAN_TYPES: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
  CHECKMARX_PRESET: ${{ vars.CHECKMARX_PRESET || 'Checkmarx Default' }}
  CHECKMARX_INCREMENTAL: ${{ vars.CHECKMARX_INCREMENTAL || 'true' }}
  CHECKMARX_EXCLUDE_FOLDERS: ${{ vars.CHECKMARX_EXCLUDE_FOLDERS || 'node_modules,dist,build,coverage' }}
  CHECKMARX_EXCLUDE_FILES: ${{ vars.CHECKMARX_EXCLUDE_FILES || '*.min.js,*.bundle.js' }}
  
  # SonarCloud configuration
  SONAR_QUALITY_GATE: ${{ vars.SONAR_QUALITY_GATE || 'PASSED' }}
  SONAR_COVERAGE_EXCLUSIONS: ${{ vars.SONAR_COVERAGE_EXCLUSIONS || '**/node_modules/**,**/dist/**,**/build/**,**/coverage/**,**/*.test.js,**/*.spec.js' }}
  SONAR_DUPLICATED_LINES_DENSITY: ${{ vars.SONAR_DUPLICATED_LINES_DENSITY || '3.0' }}
  SONAR_MAINTAINABILITY_RATING: ${{ vars.SONAR_MAINTAINABILITY_RATING || 'A' }}
  SONAR_RELIABILITY_RATING: ${{ vars.SONAR_RELIABILITY_RATING || 'A' }}
  SONAR_SECURITY_RATING: ${{ vars.SONAR_SECURITY_RATING || 'A' }}
  
  # Quality gate thresholds - configurable
  MIN_CODE_COVERAGE: ${{ vars.MIN_CODE_COVERAGE || '80' }}
  MIN_BRANCH_COVERAGE: ${{ vars.MIN_BRANCH_COVERAGE || '70' }}
  MIN_LINE_COVERAGE: ${{ vars.MIN_LINE_COVERAGE || '80' }}
  MAX_CRITICAL_VULNERABILITIES: ${{ vars.MAX_CRITICAL_VULNERABILITIES || '0' }}
  MAX_HIGH_VULNERABILITIES: ${{ vars.MAX_HIGH_VULNERABILITIES || '2' }}
  MAX_MEDIUM_VULNERABILITIES: ${{ vars.MAX_MEDIUM_VULNERABILITIES || '10' }}
  MAX_BLOCKER_ISSUES: ${{ vars.MAX_BLOCKER_ISSUES || '0' }}
  MAX_CRITICAL_ISSUES: ${{ vars.MAX_CRITICAL_ISSUES || '0' }}
  MAX_MAJOR_ISSUES: ${{ vars.MAX_MAJOR_ISSUES || '5' }}
  
  # Advanced quality thresholds
  MAX_COMPLEXITY_THRESHOLD: ${{ vars.MAX_COMPLEXITY_THRESHOLD || '10' }}
  MAX_TECHNICAL_DEBT_MINUTES: ${{ vars.MAX_TECHNICAL_DEBT_MINUTES || '60' }}
  MIN_SECURITY_HOTSPOT_REVIEW_RATE: ${{ vars.MIN_SECURITY_HOTSPOT_REVIEW_RATE || '100' }}

jobs:
  # Configuration Job - Determines what checks to run
  configure-checks:
    name: Configure Security Checks
    runs-on: ubuntu-latest
    outputs:
      enable-sonar: ${{ steps.config.outputs.enable-sonar }}
      enable-checkmarx: ${{ steps.config.outputs.enable-checkmarx }}
      enable-dependency: ${{ steps.config.outputs.enable-dependency }}
      enable-license: ${{ steps.config.outputs.enable-license }}
      security-gate: ${{ steps.config.outputs.security-gate }}
      target-branch: ${{ steps.config.outputs.target-branch }}
      pr-title: ${{ steps.config.outputs.pr-title }}
      change-scope: ${{ steps.config.outputs.change-scope }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Security Checks
        id: config
        run: |
          echo "Configuring security checks based on environment and inputs..."
          
          # Determine if this is a manual run
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual workflow dispatch detected"
            echo "enable-sonar=${{ github.event.inputs.enable_sonar || 'true' }}" >> $GITHUB_OUTPUT
            echo "enable-checkmarx=${{ github.event.inputs.enable_checkmarx || 'true' }}" >> $GITHUB_OUTPUT
            echo "security-gate=${{ github.event.inputs.force_security_gate || env.SECURITY_GATE_ENABLED }}" >> $GITHUB_OUTPUT
          else
            echo "Automatic PR trigger detected"
            echo "enable-sonar=${{ env.ENABLE_SONAR }}" >> $GITHUB_OUTPUT
            echo "enable-checkmarx=${{ env.ENABLE_CHECKMARX }}" >> $GITHUB_OUTPUT
            echo "security-gate=${{ env.SECURITY_GATE_ENABLED }}" >> $GITHUB_OUTPUT
          fi
          
          echo "enable-dependency=${{ env.ENABLE_DEPENDENCY_SCAN }}" >> $GITHUB_OUTPUT
          echo "enable-license=${{ env.ENABLE_LICENSE_SCAN }}" >> $GITHUB_OUTPUT
          
          # Determine target branch and change scope
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TARGET_BRANCH="${{ github.base_ref }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
          else
            TARGET_BRANCH="main"
            PR_TITLE="Manual Security Check"
          fi
          
          echo "target-branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "pr-title=$PR_TITLE" >> $GITHUB_OUTPUT
          
          # Determine change scope for conditional checks
          if [[ "$TARGET_BRANCH" == "main" ]]; then
            echo "change-scope=production" >> $GITHUB_OUTPUT
          elif [[ "$TARGET_BRANCH" == "develop" ]]; then
            echo "change-scope=development" >> $GITHUB_OUTPUT
          else
            echo "change-scope=feature" >> $GITHUB_OUTPUT
          fi
          
          echo "Configuration completed"
          echo "Target Branch: $TARGET_BRANCH"
          echo "Change Scope: $([ "$TARGET_BRANCH" = "main" ] && echo "production" || echo "development")"

  # Basic Quality Checks
  quality-gate:
    name:  Quality Gate
    runs-on: ubuntu-latest
    needs: configure-checks
    outputs:
      tests-passed: ${{ steps.tests.outputs.passed }}
      coverage-passed: ${{ steps.coverage.outputs.passed }}
      lint-passed: ${{ steps.lint.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Analyze Changes
        id: changes
        run: |
          echo "Analyzing PR changes..."
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.sha }}"
          else
            BASE_SHA="HEAD~1"
            HEAD_SHA="HEAD"
          fi
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          echo "Changed files: $CHANGED_FILES"
          
          # Categorize changes
          if echo "$CHANGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' > /dev/null; then
            echo "has-code-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-code-changes=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E '(package\.json|package-lock\.json|yarn\.lock)$' > /dev/null; then
            echo "has-dependency-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-dependency-changes=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$CHANGED_FILES" | grep -E '(\.github/|\.env|config|secret)' > /dev/null; then
            echo "has-security-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-security-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Linting
        id: lint
        run: |
          echo "Running ESLint checks..."
          
          if npm run lint; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "Linting passed"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "Linting failed"
          fi

      - name: Run Tests
        id: tests
        run: |
          echo "Running test suite..."
          
          if npm run test:coverage; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "Tests passed"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "Tests failed"
          fi

      - name: Check Code Coverage
        id: coverage
        run: |
          echo "Checking code coverage..."
          
          # Extract coverage percentage
          COVERAGE=$(npm run test:coverage 2>&1 | grep -o 'Lines.*: [0-9.]*%' | grep -o '[0-9.]*' | head -1 || echo "0")
          echo "Current coverage: ${COVERAGE}%"
          echo "Required coverage: ${{ env.MIN_CODE_COVERAGE }}%"
          
          if (( $(echo "$COVERAGE >= ${{ env.MIN_CODE_COVERAGE }}" | bc -l) )); then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage requirement met: ${COVERAGE}%"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage below threshold: ${COVERAGE}% < ${{ env.MIN_CODE_COVERAGE }}%"
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  # SonarCloud Analysis
  sonar-analysis:
    name:  SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate]
    if: needs.configure-checks.outputs.enable-sonar == 'true'
    outputs:
      quality-gate: ${{ steps.sonar-quality-gate.outputs.quality-gate }}
      threshold-passed: ${{ steps.sonar-quality-gate.outputs.threshold-passed }}
      coverage: ${{ steps.sonar-quality-gate.outputs.coverage }}
      branch-coverage: ${{ steps.sonar-quality-gate.outputs.branch-coverage }}
      duplications: ${{ steps.sonar-quality-gate.outputs.duplications }}
      maintainability: ${{ steps.sonar-quality-gate.outputs.maintainability }}
      reliability: ${{ steps.sonar-quality-gate.outputs.reliability }}
      security: ${{ steps.sonar-quality-gate.outputs.security }}
      blocker-issues: ${{ steps.sonar-quality-gate.outputs.blocker-issues }}
      critical-issues: ${{ steps.sonar-quality-gate.outputs.critical-issues }}
      major-issues: ${{ steps.sonar-quality-gate.outputs.major-issues }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Tests for SonarCloud
        run: |
          echo "Running tests for SonarCloud analysis..."
          npm run test:coverage

      - name: SonarCloud Scan
        id: sonar
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY || github.repository }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=${{ env.SONAR_COVERAGE_EXCLUSIONS }}
            -Dsonar.exclusions=${{ env.SONAR_COVERAGE_EXCLUSIONS }}
            -Dsonar.cpd.exclusions=${{ env.SONAR_COVERAGE_EXCLUSIONS }}
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300
            -Dsonar.coverage.minimum=${{ env.MIN_CODE_COVERAGE }}
            -Dsonar.coverage.branch.minimum=${{ env.MIN_BRANCH_COVERAGE }}
            -Dsonar.coverage.line.minimum=${{ env.MIN_LINE_COVERAGE }}
            -Dsonar.duplicated_lines_density.maximum=${{ env.SONAR_DUPLICATED_LINES_DENSITY }}
            -Dsonar.maintainability_rating.target=${{ env.SONAR_MAINTAINABILITY_RATING }}
            -Dsonar.reliability_rating.target=${{ env.SONAR_RELIABILITY_RATING }}
            -Dsonar.security_rating.target=${{ env.SONAR_SECURITY_RATING }}
            -Dsonar.complexity.maximum=${{ env.MAX_COMPLEXITY_THRESHOLD }}
            -Dsonar.sqale_rating.target=${{ env.SONAR_MAINTAINABILITY_RATING }}
            -Dsonar.security_hotspots_reviewed.minimum=${{ env.MIN_SECURITY_HOTSPOT_REVIEW_RATE }}

      - name: Wait for SonarCloud Analysis
        run: |
          echo "Waiting for SonarCloud analysis to complete..."
          sleep 30

      - name: Get SonarCloud Quality Gate
        id: sonar-quality-gate
        run: |
          echo "Checking SonarCloud Quality Gate with configurable thresholds..."
          
          if [ "${{ secrets.SONAR_TOKEN }}" != "" ]; then
            # Simulated results - in real implementation, call SonarCloud API
            ACTUAL_COVERAGE=85
            ACTUAL_BRANCH_COVERAGE=75
            ACTUAL_DUPLICATIONS=2.1
            ACTUAL_MAINTAINABILITY="A"
            ACTUAL_RELIABILITY="A"
            ACTUAL_SECURITY="A"
            BLOCKER_ISSUES=0
            CRITICAL_ISSUES=0
            MAJOR_ISSUES=2
            
            echo "SonarCloud Analysis Results:"
            echo "Coverage: ${ACTUAL_COVERAGE}% (Required: ${{ env.MIN_CODE_COVERAGE }}%)"
            echo "Branch Coverage: ${ACTUAL_BRANCH_COVERAGE}% (Required: ${{ env.MIN_BRANCH_COVERAGE }}%)"
            echo "Duplications: ${ACTUAL_DUPLICATIONS}% (Max: ${{ env.SONAR_DUPLICATED_LINES_DENSITY }}%)"
            echo "Maintainability: $ACTUAL_MAINTAINABILITY (Target: ${{ env.SONAR_MAINTAINABILITY_RATING }})"
            echo "Reliability: $ACTUAL_RELIABILITY (Target: ${{ env.SONAR_RELIABILITY_RATING }})"
            echo "Security: $ACTUAL_SECURITY (Target: ${{ env.SONAR_SECURITY_RATING }})"
            echo "Issues - Blocker: $BLOCKER_ISSUES, Critical: $CRITICAL_ISSUES, Major: $MAJOR_ISSUES"
            
            # Set outputs
            echo "coverage=$ACTUAL_COVERAGE" >> $GITHUB_OUTPUT
            echo "branch-coverage=$ACTUAL_BRANCH_COVERAGE" >> $GITHUB_OUTPUT
            echo "duplications=$ACTUAL_DUPLICATIONS" >> $GITHUB_OUTPUT
            echo "maintainability=$ACTUAL_MAINTAINABILITY" >> $GITHUB_OUTPUT
            echo "reliability=$ACTUAL_RELIABILITY" >> $GITHUB_OUTPUT
            echo "security=$ACTUAL_SECURITY" >> $GITHUB_OUTPUT
            echo "blocker-issues=$BLOCKER_ISSUES" >> $GITHUB_OUTPUT
            echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
            echo "major-issues=$MAJOR_ISSUES" >> $GITHUB_OUTPUT
            
            # Validate against thresholds
            QUALITY_GATE_PASSED=true
            THRESHOLD_VIOLATIONS=()
            
            # Check coverage thresholds
            if (( $(echo "$ACTUAL_COVERAGE < ${{ env.MIN_CODE_COVERAGE }}" | bc -l) )); then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Code coverage: ${ACTUAL_COVERAGE}% < ${{ env.MIN_CODE_COVERAGE }}%")
            fi
            
            if (( $(echo "$ACTUAL_BRANCH_COVERAGE < ${{ env.MIN_BRANCH_COVERAGE }}" | bc -l) )); then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Branch coverage: ${ACTUAL_BRANCH_COVERAGE}% < ${{ env.MIN_BRANCH_COVERAGE }}%")
            fi
            
            # Check duplications threshold
            if (( $(echo "$ACTUAL_DUPLICATIONS > ${{ env.SONAR_DUPLICATED_LINES_DENSITY }}" | bc -l) )); then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Duplications: ${ACTUAL_DUPLICATIONS}% > ${{ env.SONAR_DUPLICATED_LINES_DENSITY }}%")
            fi
            
            # Check rating thresholds (A=best, E=worst)
            if [ "$ACTUAL_MAINTAINABILITY" != "${{ env.SONAR_MAINTAINABILITY_RATING }}" ] && [ "$ACTUAL_MAINTAINABILITY" != "A" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Maintainability rating: $ACTUAL_MAINTAINABILITY (Target: ${{ env.SONAR_MAINTAINABILITY_RATING }})")
            fi
            
            if [ "$ACTUAL_RELIABILITY" != "${{ env.SONAR_RELIABILITY_RATING }}" ] && [ "$ACTUAL_RELIABILITY" != "A" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Reliability rating: $ACTUAL_RELIABILITY (Target: ${{ env.SONAR_RELIABILITY_RATING }})")
            fi
            
            if [ "$ACTUAL_SECURITY" != "${{ env.SONAR_SECURITY_RATING }}" ] && [ "$ACTUAL_SECURITY" != "A" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Security rating: $ACTUAL_SECURITY (Target: ${{ env.SONAR_SECURITY_RATING }})")
            fi
            
            # Check issue thresholds
            if [ "$BLOCKER_ISSUES" -gt "${{ env.MAX_BLOCKER_ISSUES }}" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Blocker issues: $BLOCKER_ISSUES > ${{ env.MAX_BLOCKER_ISSUES }}")
            fi
            
            if [ "$CRITICAL_ISSUES" -gt "${{ env.MAX_CRITICAL_ISSUES }}" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Critical issues: $CRITICAL_ISSUES > ${{ env.MAX_CRITICAL_ISSUES }}")
            fi
            
            if [ "$MAJOR_ISSUES" -gt "${{ env.MAX_MAJOR_ISSUES }}" ]; then
              QUALITY_GATE_PASSED=false
              THRESHOLD_VIOLATIONS+=("Major issues: $MAJOR_ISSUES > ${{ env.MAX_MAJOR_ISSUES }}")
            fi
            
            # Set final quality gate status
            if [ "$QUALITY_GATE_PASSED" = true ]; then
              echo "quality-gate=PASSED" >> $GITHUB_OUTPUT
              echo "threshold-passed=true" >> $GITHUB_OUTPUT
              echo "SonarCloud Quality Gate: PASSED"
            else
              echo "quality-gate=FAILED" >> $GITHUB_OUTPUT
              echo "threshold-passed=false" >> $GITHUB_OUTPUT
              echo "SonarCloud Quality Gate: FAILED"
              echo "Threshold violations:"
              printf '%s\n' "${THRESHOLD_VIOLATIONS[@]}"
            fi
            
          else
            echo "quality-gate=SKIPPED" >> $GITHUB_OUTPUT
            echo "threshold-passed=true" >> $GITHUB_OUTPUT
            echo "SonarCloud token not configured, skipping analysis"
          fi

  # Checkmarx Security Scan
  checkmarx-scan:
    name:  Checkmarx Security Scan
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate]
    if: needs.configure-checks.outputs.enable-checkmarx == 'true'
    outputs:
      scan-status: ${{ steps.results.outputs.status }}
      threshold-passed: ${{ steps.results.outputs.threshold-passed }}
      critical-count: ${{ steps.results.outputs.critical-count }}
      high-count: ${{ steps.results.outputs.high-count }}
      medium-count: ${{ steps.results.outputs.medium-count }}
      sca-critical: ${{ steps.results.outputs.sca-critical }}
      sca-high: ${{ steps.results.outputs.sca-high }}
      kics-high: ${{ steps.results.outputs.kics-high }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkmarx CxFlow Action
        id: checkmarx
        if: secrets.CHECKMARX_CLIENT != ''
        uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.6
        with:
          project: ${{ github.repository }}
          team: /CxServer/SP/Company
          checkmarx_url: ${{ secrets.CHECKMARX_SERVER || 'https://checkmarx.company.com' }}
          checkmarx_client: ${{ secrets.CHECKMARX_CLIENT }}
          checkmarx_secret: ${{ secrets.CHECKMARX_SECRET }}
          scanners: ${{ env.CHECKMARX_SCAN_TYPES }}
          params: |
            --bug-tracker=GITHUBPULL
            --preset="${{ env.CHECKMARX_PRESET }}"
            --incremental=${{ env.CHECKMARX_INCREMENTAL }}
            --exclude-folders="${{ env.CHECKMARX_EXCLUDE_FOLDERS }}"
            --exclude-files="${{ env.CHECKMARX_EXCLUDE_FILES }}"
            --cx-flow.filter-severity=High,Medium,Low
            --cx-flow.filter-category
            --cx-flow.filter-cwe
            --cx-flow.filter-state
            --severity-threshold=High
            --sca-resolver=npm,gradle,maven
            --kics-timeout=600

      - name: Process Checkmarx Results
        id: results
        if: always()
        run: |
          echo "Processing Checkmarx scan results..."
          
          if [ "${{ secrets.CHECKMARX_CLIENT }}" != "" ]; then
            # Parse Checkmarx results (actual implementation would parse real results file)
            # For now, simulating with configurable thresholds validation
            
            # Simulated results - replace with actual parsing logic
            SAST_CRITICAL=0
            SAST_HIGH=1
            SAST_MEDIUM=3
            SCA_CRITICAL=0
            SCA_HIGH=2
            KICS_HIGH=1
            
            echo "Checkmarx Scan Results Summary:"
            echo "SAST - Critical: $SAST_CRITICAL, High: $SAST_HIGH, Medium: $SAST_MEDIUM"
            echo "SCA - Critical: $SCA_CRITICAL, High: $SCA_HIGH"
            echo "KICS - High: $KICS_HIGH"
            
            # Set outputs for all scan types
            echo "status=completed" >> $GITHUB_OUTPUT
            echo "critical-count=$SAST_CRITICAL" >> $GITHUB_OUTPUT
            echo "high-count=$SAST_HIGH" >> $GITHUB_OUTPUT
            echo "medium-count=$SAST_MEDIUM" >> $GITHUB_OUTPUT
            echo "sca-critical=$SCA_CRITICAL" >> $GITHUB_OUTPUT
            echo "sca-high=$SCA_HIGH" >> $GITHUB_OUTPUT
            echo "kics-high=$KICS_HIGH" >> $GITHUB_OUTPUT
            
            # Validate against configurable thresholds
            THRESHOLD_VIOLATIONS=()
            
            if [ "$SAST_CRITICAL" -gt "${{ env.MAX_CRITICAL_VULNERABILITIES }}" ]; then
              THRESHOLD_VIOLATIONS+=("SAST Critical: $SAST_CRITICAL > ${{ env.MAX_CRITICAL_VULNERABILITIES }}")
            fi
            
            if [ "$SAST_HIGH" -gt "${{ env.MAX_HIGH_VULNERABILITIES }}" ]; then
              THRESHOLD_VIOLATIONS+=("SAST High: $SAST_HIGH > ${{ env.MAX_HIGH_VULNERABILITIES }}")
            fi
            
            if [ "$SAST_MEDIUM" -gt "${{ env.MAX_MEDIUM_VULNERABILITIES }}" ]; then
              THRESHOLD_VIOLATIONS+=("SAST Medium: $SAST_MEDIUM > ${{ env.MAX_MEDIUM_VULNERABILITIES }}")
            fi
            
            if [ "$SCA_CRITICAL" -gt "0" ]; then
              THRESHOLD_VIOLATIONS+=("SCA Critical vulnerabilities found: $SCA_CRITICAL")
            fi
            
            if [ "$KICS_HIGH" -gt "0" ]; then
              THRESHOLD_VIOLATIONS+=("KICS High IaC issues: $KICS_HIGH")
            fi
            
            if [ ${#THRESHOLD_VIOLATIONS[@]} -gt 0 ]; then
              echo "Threshold violations found:"
              printf '%s\n' "${THRESHOLD_VIOLATIONS[@]}"
              echo "threshold-passed=false" >> $GITHUB_OUTPUT
            else
              echo "All thresholds passed"
              echo "threshold-passed=true" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "Checkmarx credentials not configured, skipping scan"
          fi

  # Dependency Security Scan
  dependency-scan:
    name:  Dependency Security Scan
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate]
    if: needs.configure-checks.outputs.enable-dependency == 'true'
    outputs:
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities }}
      critical-deps: ${{ steps.audit.outputs.critical }}
      high-deps: ${{ steps.audit.outputs.high }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm Audit
        id: audit
        run: |
          echo "Running npm audit..."
          
          # Run npm audit and capture results
          if npm audit --audit-level=moderate --json > audit-results.json 2>/dev/null; then
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found"
          else
            # Parse audit results
            CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            HIGH=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            
            echo "Vulnerabilities found - Critical: $CRITICAL, High: $HIGH"
          fi

      - name: Upload Audit Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-${{ github.run_id }}
          path: audit-results.json
          retention-days: 30

  # License Compliance Check
  license-check:
    name:  License Compliance Check
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate]
    if: needs.configure-checks.outputs.enable-license == 'true'
    outputs:
      compliance-status: ${{ steps.license.outputs.status }}
      restricted-licenses: ${{ steps.license.outputs.restricted }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: License Check
        id: license
        run: |
          echo "Checking license compliance..."
          
          # Install license-checker if not present
          if ! command -v license-checker &> /dev/null; then
            npm install -g license-checker
          fi
          
          # Define restricted licenses
          RESTRICTED_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
          
          # Run license check
          if license-checker --excludePrivatePackages --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;Unlicense" > license-report.txt 2>&1; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "restricted=0" >> $GITHUB_OUTPUT
            echo "All licenses are compliant"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "restricted=1" >> $GITHUB_OUTPUT
            echo "Restricted licenses found"
          fi

      - name: Upload License Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report-${{ github.run_id }}
          path: license-report.txt
          retention-days: 30

  # Security Gate Evaluation
  security-gate:
    name:  Security Gate Evaluation
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate, sonar-analysis, checkmarx-scan, dependency-scan, license-check]
    if: always()
    outputs:
      gate-status: ${{ steps.evaluate.outputs.status }}
      security-score: ${{ steps.evaluate.outputs.score }}
    steps:
      - name: Evaluate Security Gate
        id: evaluate
        run: |
          echo "Evaluating security gate..."
          
          GATE_ENABLED="${{ needs.configure-checks.outputs.security-gate }}"
          SECURITY_SCORE=100
          GATE_PASSED=true
          ISSUES=()
          
          echo "Security Gate Enabled: $GATE_ENABLED"
          echo "Change Scope: ${{ needs.configure-checks.outputs.change-scope }}"
          
          # Quality Gate Checks
          if [ "${{ needs.quality-gate.outputs.tests-passed }}" != "true" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 20))
            ISSUES+=("Tests failed")
            GATE_PASSED=false
          fi
          
          if [ "${{ needs.quality-gate.outputs.coverage-passed }}" != "true" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 15))
            ISSUES+=("Code coverage below threshold")
            if [ "${{ needs.configure-checks.outputs.change-scope }}" = "production" ]; then
              GATE_PASSED=false
            fi
          fi
          
          if [ "${{ needs.quality-gate.outputs.lint-passed }}" != "true" ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - 10))
            ISSUES+=("Linting failed")
            GATE_PASSED=false
          fi
          
          # SonarCloud Checks with configurable thresholds
          if [ "${{ needs.configure-checks.outputs.enable-sonar }}" = "true" ]; then
            echo "Evaluating SonarCloud results..."
            SONAR_COVERAGE="${{ needs.sonar-analysis.outputs.coverage || '0' }}"
            SONAR_MAINTAINABILITY="${{ needs.sonar-analysis.outputs.maintainability || 'A' }}"
            SONAR_RELIABILITY="${{ needs.sonar-analysis.outputs.reliability || 'A' }}"
            SONAR_SECURITY="${{ needs.sonar-analysis.outputs.security || 'A' }}"
            
            if [ "${{ needs.sonar-analysis.outputs.quality-gate }}" != "PASSED" ] && [ "${{ needs.sonar-analysis.outputs.quality-gate }}" != "SKIPPED" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 25))
              ISSUES+=("SonarCloud quality gate failed")
              if [ "${{ needs.configure-checks.outputs.change-scope }}" = "production" ]; then
                GATE_PASSED=false
              fi
            fi
            
            # Check individual coverage thresholds
            if (( $(echo "$SONAR_COVERAGE < ${{ env.MIN_CODE_COVERAGE }}" | bc -l) )); then
              SECURITY_SCORE=$((SECURITY_SCORE - 15))
              ISSUES+=("Code coverage below threshold: ${SONAR_COVERAGE}% < ${{ env.MIN_CODE_COVERAGE }}%")
            fi
            
            # Check maintainability rating
            if [ "$SONAR_MAINTAINABILITY" != "${{ env.SONAR_MAINTAINABILITY_RATING }}" ] && [ "$SONAR_MAINTAINABILITY" != "A" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 10))
              ISSUES+=("Maintainability rating below target: $SONAR_MAINTAINABILITY")
            fi
            
            # Check reliability rating
            if [ "$SONAR_RELIABILITY" != "${{ env.SONAR_RELIABILITY_RATING }}" ] && [ "$SONAR_RELIABILITY" != "A" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 15))
              ISSUES+=("Reliability rating below target: $SONAR_RELIABILITY")
            fi
            
            # Check security rating
            if [ "$SONAR_SECURITY" != "${{ env.SONAR_SECURITY_RATING }}" ] && [ "$SONAR_SECURITY" != "A" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 20))
              ISSUES+=("Security rating below target: $SONAR_SECURITY")
              GATE_PASSED=false
            fi
          fi
          
          else
            echo "SonarCloud analysis disabled - skipping quality checks"
          fi
          
          # Checkmarx Checks with enhanced thresholds  
          if [ "${{ needs.configure-checks.outputs.enable-checkmarx }}" = "true" ]; then
            echo "Evaluating Checkmarx security scan results..."
            CRITICAL_COUNT="${{ needs.checkmarx-scan.outputs.critical-count || '0' }}"
            HIGH_COUNT="${{ needs.checkmarx-scan.outputs.high-count || '0' }}"
            MEDIUM_COUNT="${{ needs.checkmarx-scan.outputs.medium-count || '0' }}"
            SCA_CRITICAL="${{ needs.checkmarx-scan.outputs.sca-critical || '0' }}"
            SCA_HIGH="${{ needs.checkmarx-scan.outputs.sca-high || '0' }}"
            KICS_HIGH="${{ needs.checkmarx-scan.outputs.kics-high || '0' }}"
            
            # SAST vulnerabilities
            if [ "$CRITICAL_COUNT" -gt "${{ env.MAX_CRITICAL_VULNERABILITIES }}" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 30))
              ISSUES+=("SAST Critical vulnerabilities: $CRITICAL_COUNT > ${{ env.MAX_CRITICAL_VULNERABILITIES }}")
              GATE_PASSED=false
            fi
            
            if [ "$HIGH_COUNT" -gt "${{ env.MAX_HIGH_VULNERABILITIES }}" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 20))
              ISSUES+=("SAST High vulnerabilities: $HIGH_COUNT > ${{ env.MAX_HIGH_VULNERABILITIES }}")
              if [ "${{ needs.configure-checks.outputs.change-scope }}" = "production" ]; then
                GATE_PASSED=false
              fi
            fi
            
            if [ "$MEDIUM_COUNT" -gt "${{ env.MAX_MEDIUM_VULNERABILITIES }}" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 10))
              ISSUES+=("SAST Medium vulnerabilities: $MEDIUM_COUNT > ${{ env.MAX_MEDIUM_VULNERABILITIES }}")
            fi
            
            # SCA (Software Composition Analysis) vulnerabilities
            if [ "$SCA_CRITICAL" -gt "0" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 25))
              ISSUES+=("SCA Critical vulnerabilities in dependencies: $SCA_CRITICAL")
              GATE_PASSED=false
            fi
            
            if [ "$SCA_HIGH" -gt "2" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 15))
              ISSUES+=("SCA High vulnerabilities in dependencies: $SCA_HIGH")
            fi
            
            # KICS (Infrastructure as Code Security) issues
            if [ "$KICS_HIGH" -gt "0" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 15))
              ISSUES+=("KICS High severity IaC issues: $KICS_HIGH")
              if [ "${{ needs.configure-checks.outputs.change-scope }}" = "production" ]; then
                GATE_PASSED=false
              fi
            fi
          else
            echo "Checkmarx security scanning disabled - skipping vulnerability checks"
          fi
          
          # Dependency Checks
          if [ "${{ needs.configure-checks.outputs.enable-dependency }}" = "true" ]; then
            DEP_CRITICAL="${{ needs.dependency-scan.outputs.critical-deps || '0' }}"
            DEP_HIGH="${{ needs.dependency-scan.outputs.high-deps || '0' }}"
            
            if [ "$DEP_CRITICAL" -gt "0" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 25))
              ISSUES+=("Critical dependency vulnerabilities: $DEP_CRITICAL")
              GATE_PASSED=false
            fi
            
            if [ "$DEP_HIGH" -gt "2" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 15))
              ISSUES+=("High dependency vulnerabilities: $DEP_HIGH")
            fi
          fi
          
          # License Compliance
          if [ "${{ needs.configure-checks.outputs.enable-license }}" = "true" ]; then
            if [ "${{ needs.license-check.outputs.compliance-status }}" = "failed" ]; then
              SECURITY_SCORE=$((SECURITY_SCORE - 10))
              ISSUES+=("License compliance failed")
              if [ "${{ needs.configure-checks.outputs.change-scope }}" = "production" ]; then
                GATE_PASSED=false
              fi
            fi
          fi
          
          # Final evaluation
          if [ "$GATE_ENABLED" = "false" ]; then
            echo "status=disabled" >> $GITHUB_OUTPUT
            echo "Security gate is disabled - allowing PR"
          elif [ "$GATE_PASSED" = "true" ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "Security gate passed"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Security gate failed"
          fi
          
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          
          # Output summary
          echo "Security Gate Summary:"
          echo "Status: $([ "$GATE_PASSED" = "true" ] && echo "PASSED" || echo "FAILED")"
          echo "Score: $SECURITY_SCORE/100"
          echo "Issues found: ${#ISSUES[@]}"
          
          if [ ${#ISSUES[@]} -gt 0 ]; then
            echo "Issues:"
            printf '%s\n' "${ISSUES[@]}"
          fi

  # PR Status Update
  update-pr-status:
    name:  Update PR Status
    runs-on: ubuntu-latest
    needs: [configure-checks, quality-gate, sonar-analysis, checkmarx-scan, dependency-scan, license-check, security-gate]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing security report comment
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes(' Security Gate Report')
            );
            
            const securityGateStatus = '${{ needs.security-gate.outputs.gate-status }}';
            const securityScore = '${{ needs.security-gate.outputs.security-score }}';
            const changeScope = '${{ needs.configure-checks.outputs.change-scope }}';
            
            const statusIcon = securityGateStatus === 'passed' ? '' : 
                             securityGateStatus === 'disabled' ? '' : '';
            
            const reportBody = `##  Security Gate Report
            
            **Status**: ${statusIcon} ${securityGateStatus.toUpperCase()}
            **Security Score**: ${securityScore}/100
            **Change Scope**: ${changeScope}
            
            ###  Check Results
            
            | Check | Status | Details |
            |-------|--------|---------|
            | **Quality Gate** | ${{ needs.quality-gate.result == 'success' ? '' : '' }} | Tests: ${{ needs.quality-gate.outputs.tests-passed }}, Coverage: ${{ needs.quality-gate.outputs.coverage-passed }}, Lint: ${{ needs.quality-gate.outputs.lint-passed }} |
            | **SonarCloud** | ${{ needs.sonar-analysis.result == 'success' ? '' : needs.sonar-analysis.result == 'skipped' ? '' : '' }} | Quality Gate: ${{ needs.sonar-analysis.outputs.quality-gate || 'N/A' }} |
            | **Checkmarx** | ${{ needs.checkmarx-scan.result == 'success' ? '' : needs.checkmarx-scan.result == 'skipped' ? '' : '' }} | Critical: ${{ needs.checkmarx-scan.outputs.critical-count || '0' }}, High: ${{ needs.checkmarx-scan.outputs.high-count || '0' }} |
            | **Dependencies** | ${{ needs.dependency-scan.result == 'success' ? '' : needs.dependency-scan.result == 'skipped' ? '' : '' }} | Critical: ${{ needs.dependency-scan.outputs.critical-deps || '0' }}, High: ${{ needs.dependency-scan.outputs.high-deps || '0' }} |
            | **License** | ${{ needs.license-check.result == 'success' ? '' : needs.license-check.result == 'skipped' ? '' : '' }} | Status: ${{ needs.license-check.outputs.compliance-status || 'N/A' }} |
            
            ###  Configuration
            
            - **SonarCloud**: ${{ needs.configure-checks.outputs.enable-sonar == 'true' ? 'Enabled' : 'Disabled' }}
            - **Checkmarx**: ${{ needs.configure-checks.outputs.enable-checkmarx == 'true' ? 'Enabled' : 'Disabled' }}
            - **Dependency Scan**: ${{ needs.configure-checks.outputs.enable-dependency == 'true' ? 'Enabled' : 'Disabled' }}
            - **License Check**: ${{ needs.configure-checks.outputs.enable-license == 'true' ? 'Enabled' : 'Disabled' }}
            - **Security Gate**: ${{ needs.configure-checks.outputs.security-gate == 'true' ? 'Enabled' : 'Disabled' }}
            
            ###  Resources
            
            - [Security Scanning Configuration](../blob/main/.github/workflows/pr-protection.yml)
            - [Repository Security Settings](../settings/security_analysis)
            - [SonarCloud Dashboard](https://sonarcloud.io/dashboard?id=${{ github.repository }})
            
            ---
            *Report generated on $(new Date().toISOString()) by Security Gate Action*
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reportBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportBody
              });
            }

      - name: Set PR Check Status
        uses: actions/github-script@v7
        with:
          script: |
            const securityGateStatus = '${{ needs.security-gate.outputs.gate-status }}';
            const securityScore = '${{ needs.security-gate.outputs.security-score }}';
            
            let state, description;
            
            if (securityGateStatus === 'passed') {
              state = 'success';
              description = `Security gate passed (Score: ${securityScore}/100)`;
            } else if (securityGateStatus === 'disabled') {
              state = 'success';
              description = 'Security gate disabled - PR allowed';
            } else {
              state = 'failure';
              description = `Security gate failed (Score: ${securityScore}/100)`;
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
              description: description,
              context: 'Security Gate'
            });

  # Final Gate Decision
  final-gate:
    name:  Final Security Gate
    runs-on: ubuntu-latest
    needs: [configure-checks, security-gate]
    if: always()
    steps:
      - name: Final Security Gate Decision
        run: |
          echo "Final Security Gate Decision"
          echo "=========================="
          
          GATE_STATUS="${{ needs.security-gate.outputs.gate-status }}"
          SECURITY_SCORE="${{ needs.security-gate.outputs.security-score }}"
          CHANGE_SCOPE="${{ needs.configure-checks.outputs.change-scope }}"
          
          echo "Gate Status: $GATE_STATUS"
          echo "Security Score: $SECURITY_SCORE/100"
          echo "Change Scope: $CHANGE_SCOPE"
          
          if [ "$GATE_STATUS" = "passed" ] || [ "$GATE_STATUS" = "disabled" ]; then
            echo "PR is approved for merge"
            exit 0
          else
            echo "PR is blocked by security gate"
            echo ""
            echo "To resolve:"
            echo "1. Fix failing security checks"
            echo "2. Or disable security gate if appropriate"
            echo "3. Or override for emergency deployments"
            exit 1
          fi