name: Shared Frontend CI/CD Pipeline

# This pipeline is optimized for deployment efficiency:
# - Build happens ONLY ONCE in the 'build-and-test' job
# - Build artifacts are uploaded and reused across all deployment jobs
# - No redundant builds during deployment, significantly reducing pipeline time
#
# Production-Grade Release Strategy:
# - Development/Staging: Short SHA (e.g., a1b2c3d4) 
# - Release branches (release/**): Auto-tagged semantic version (e.g., v1.2.3) → Auto-deploy to pre-prod
# - Production: Manual approval required after pre-prod validation
# - Pre-Production/Production: Semantic version from git tags (e.g., v1.2.3) or SHA fallback

on:
  workflow_call:
    inputs:
      # Environment configuration (only essential runtime parameter)
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: string
      
      # App-specific configuration (varies per frontend app)
      app-location:
        description: 'Source code location relative to repository root'
        required: false
        default: '/'
        type: string
      output-location:
        description: 'Built application output directory'
        required: false
        default: 'build'
        type: string
    
    secrets:
      # Generic Azure Static Web Apps API token (environment-specific via environment-level secrets)
      AZURE_STATIC_WEB_APPS_API_TOKEN:
        description: 'Azure Static Web Apps API token (resolved per environment)'
        required: false
      
      # Security scanning secrets
      SONAR_TOKEN:
        description: 'SonarCloud token'
        required: false
      CHECKMARX_CLIENT_ID:
        description: 'Checkmarx AST client ID'
        required: false
      CHECKMARX_SECRET:
        description: 'Checkmarx AST client secret'
        required: false
      CHECKMARX_TENANT:
        description: 'Checkmarx tenant'
        required: false
      CHECKMARX_BASE_URI:
        description: 'Checkmarx base URI'
        required: false
    
    outputs:
      # Deployment outputs
      dev-url:
        description: 'Development environment URL'
        value: ${{ jobs.deploy-dev.outputs.deployment-url }}
      staging-url:
        description: 'Staging environment URL'
        value: ${{ jobs.deploy-staging.outputs.deployment-url }}
      qa-url:
        description: 'QA environment URL'
        value: ${{ jobs.deploy-qa.outputs.deployment-url }}
      preprod-url:
        description: 'Pre-production environment URL'
        value: ${{ jobs.deploy-preprod.outputs.deployment-url }}
      prod-url:
        description: 'Production environment URL'
        value: ${{ jobs.deploy-prod.outputs.deployment-url }}
      
      # Quality metrics
      sonar-status:
        description: 'SonarCloud analysis status'
        value: ${{ jobs.sonar-analysis.outputs.status }}
      sonar-coverage:
        description: 'SonarCloud code coverage'
        value: ${{ jobs.sonar-analysis.outputs.coverage }}
      checkmarx-status:
        description: 'Checkmarx scan status'
        value: ${{ jobs.checkmarx-scan.outputs.status }}
      checkmarx-critical:
        description: 'Checkmarx critical vulnerabilities'
        value: ${{ jobs.checkmarx-scan.outputs.critical-count }}
      checkmarx-high:
        description: 'Checkmarx high vulnerabilities'
        value: ${{ jobs.checkmarx-scan.outputs.high-count }}
      
      # Version info
      version:
        description: 'Deployed version'
        value: ${{ jobs.detect-deployment.outputs.version }}

env:
  # Build configuration (standardized)
  NODE_VERSION: '18'
  APP_LOCATION: ${{ inputs.app-location }}
  OUTPUT_LOCATION: ${{ inputs.output-location }}
  BUILD_COMMAND: 'npm run build'
  INSTALL_COMMAND: 'npm ci'
  
  # Security scanning controls (always enabled)
  ENABLE_SONAR: 'true'
  ENABLE_CHECKMARX: 'true'
  
  # SonarQube/SonarCloud configuration
  SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}
  SONAR_SKIP_SSL_VERIFICATION: 'false'
  
  # Quality gate thresholds (enterprise standards)
  MIN_CODE_COVERAGE: '75'
  MAX_CRITICAL_VULNERABILITIES: '0'
  MAX_HIGH_VULNERABILITIES: '5'
  MAX_BLOCKER_ISSUES: '0'
  MAX_CRITICAL_ISSUES: '0'
  
  # Checkmarx configuration
  CHECKMARX_SCAN_TYPES: 'sast,sca'
  CHECKMARX_PRESET: 'Checkmarx Default'
  
  # Deployment controls
  SKIP_DEPLOYMENT: 'false'
  FORCE_VERSION: ''

jobs:
  detect-deployment:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-dev: ${{ steps.deployment-logic.outputs.deploy-dev }}
      should-deploy-staging: ${{ steps.deployment-logic.outputs.deploy-staging }}
      should-deploy-qa: ${{ steps.deployment-logic.outputs.deploy-qa }}
      should-deploy-preprod: ${{ steps.deployment-logic.outputs.deploy-preprod }}
      should-deploy-prod: ${{ steps.deployment-logic.outputs.deploy-prod }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Version
        id: version
        run: |
          SHORT_SHA="${GITHUB_SHA::8}"
          BRANCH="${{ github.ref_name }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          # Auto-tagging for release branches
          AUTO_TAGGED_VERSION=""
          if [[ "$BRANCH" == release/* ]] && [[ "${{ github.ref }}" != refs/tags/* ]]; then
            RELEASE_VERSION="${BRANCH#release/}"
            if [[ "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Auto-tagging release branch: $BRANCH → v$RELEASE_VERSION"
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag "v$RELEASE_VERSION"
              git push origin "v$RELEASE_VERSION"
              AUTO_TAGGED_VERSION="v$RELEASE_VERSION"
              echo "Created and pushed tag: v$RELEASE_VERSION"
            else
              echo "Warning: Release branch name '$BRANCH' doesn't follow semver pattern (x.y.z)"
            fi
          fi
          
          # Determine if this is a pre-prod/prod deployment
          IS_PREPROD_OR_PROD="false"
          
          if [ -n "$ENVIRONMENT" ] && [ "$ENVIRONMENT" != "development" ]; then
            # Manual workflow dispatch
            case $ENVIRONMENT in
              pre-production|production) IS_PREPROD_OR_PROD="true" ;;
            esac
          else
            # Auto deployment based on branch
            case $BRANCH in
              main|master|preprod|pre-production) IS_PREPROD_OR_PROD="true" ;;
              release/*) IS_PREPROD_OR_PROD="true" ;;
            esac
          fi
          
          # Version strategy
          if [ "$IS_PREPROD_OR_PROD" = "true" ]; then
            # Release branches, Pre-production and Production: Use semantic version from tags
            if [ -n "$AUTO_TAGGED_VERSION" ]; then
              VERSION="$AUTO_TAGGED_VERSION"
              echo "Using auto-tagged version: $VERSION"
            elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/}
              echo "Using semantic version from tag: $VERSION"
            else
              VERSION="$SHORT_SHA"
              echo "No tag found, using SHA for release/pre-prod/prod: $VERSION"
            fi
          else
            # Development, Staging, and QA: Always use SHA
            VERSION="$SHORT_SHA"
            echo "Using SHA for dev/staging/qa: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Determine Deployment Strategy
        id: deployment-logic
        run: |
          BRANCH="${{ github.ref_name }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          # Default deployment logic
          DEPLOY_DEV="false"
          DEPLOY_STAGING="false"
          DEPLOY_QA="false"
          DEPLOY_PREPROD="false"
          DEPLOY_PROD="false"
          
          if [ "${{ env.SKIP_DEPLOYMENT }}" = "true" ]; then
            echo "Deployment skipped by input"
          elif [ -n "$ENVIRONMENT" ] && [ "$ENVIRONMENT" != "development" ]; then
            # Manual workflow dispatch with specific environment
            case $ENVIRONMENT in
              staging) DEPLOY_STAGING="true" ;;
              qa) DEPLOY_QA="true" ;;
              pre-production) DEPLOY_PREPROD="true" ;;
              production) DEPLOY_PROD="true" ;;
              *) DEPLOY_DEV="true" ;;
            esac
          else
            # Auto deployment based on branch
            case $BRANCH in
              main|master) DEPLOY_PROD="true" ;;
              develop|development) DEPLOY_DEV="true" ;;
              staging) DEPLOY_STAGING="true" ;;
              qa) DEPLOY_QA="true" ;;
              preprod|pre-production) DEPLOY_PREPROD="true" ;;
              release/*) 
                # Release branches auto-deploy to pre-prod, manual approval for production
                DEPLOY_PREPROD="true"
                DEPLOY_PROD="false"
                echo "Release branch detected: $BRANCH - auto-deploying to pre-production"
                echo "Production deployment requires manual workflow dispatch with environment: 'production'"
                ;;
              *) DEPLOY_DEV="true" ;;
            esac
          fi
          
          echo "deploy-dev=$DEPLOY_DEV" >> $GITHUB_OUTPUT
          echo "deploy-staging=$DEPLOY_STAGING" >> $GITHUB_OUTPUT
          echo "deploy-qa=$DEPLOY_QA" >> $GITHUB_OUTPUT
          echo "deploy-preprod=$DEPLOY_PREPROD" >> $GITHUB_OUTPUT
          echo "deploy-prod=$DEPLOY_PROD" >> $GITHUB_OUTPUT
          
          echo "Deployment strategy: Dev=$DEPLOY_DEV, Staging=$DEPLOY_STAGING, QA=$DEPLOY_QA, Pre-prod=$DEPLOY_PREPROD, Prod=$DEPLOY_PROD"

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies and Build
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Working in directory: ${{ env.APP_LOCATION }}"
          pwd
          echo "Installing dependencies..."
          ${{ env.INSTALL_COMMAND }}
          echo "Building application (single build for all deployments)..."
          ${{ env.BUILD_COMMAND }}
          echo "Running tests..."
          npm test 2>/dev/null || echo "No tests found or test command not available"

      - name: Verify Build Output
        run: |
          # Check if OUTPUT_LOCATION is relative to APP_LOCATION or absolute
          if [[ "${{ env.OUTPUT_LOCATION }}" == /* ]]; then
            BUILD_PATH="${{ env.OUTPUT_LOCATION }}"
          else
            BUILD_PATH="${{ env.APP_LOCATION }}/${{ env.OUTPUT_LOCATION }}"
          fi
          
          echo "Checking build output at: $BUILD_PATH"
          
          if [ -d "$BUILD_PATH" ]; then
            echo "Build completed successfully"
            echo "Build output size: $(du -sh $BUILD_PATH | cut -f1)"
            echo "Build contents:"
            ls -la $BUILD_PATH
          else
            echo "ERROR: Build output directory not found: $BUILD_PATH"
            echo "Available directories in APP_LOCATION:"
            ls -la ${{ env.APP_LOCATION }}
            exit 1
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.APP_LOCATION }}/${{ env.OUTPUT_LOCATION }}/
          retention-days: 7
          compression-level: 6

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    outputs:
      status: ${{ steps.sonar-scan.outputs.status }}
      coverage: ${{ steps.sonar-scan.outputs.coverage }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Installing dependencies in: ${{ env.APP_LOCATION }}"
          pwd
          ${{ env.INSTALL_COMMAND }}

      - name: SonarCloud Analysis
        id: sonar-scan
        uses: ./.github/actions/sonar-analysis
        with:
          enabled: ${{ env.ENABLE_SONAR }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          organization: ${{ vars.SONAR_ORGANIZATION }}
          sonar-host-url: ${{ env.SONAR_HOST_URL }}
          skip-ssl-verification: ${{ env.SONAR_SKIP_SSL_VERIFICATION }}
          min-code-coverage: ${{ env.MIN_CODE_COVERAGE }}
          max-blocker-issues: ${{ env.MAX_BLOCKER_ISSUES }}
          max-critical-issues: ${{ env.MAX_CRITICAL_ISSUES }}
          app-location: ${{ env.APP_LOCATION }}

  checkmarx-scan:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()
    outputs:
      status: ${{ steps.checkmarx-security.outputs.status }}
      critical-count: ${{ steps.checkmarx-security.outputs.critical-count }}
      high-count: ${{ steps.checkmarx-security.outputs.high-count }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Installing dependencies in: ${{ env.APP_LOCATION }}"
          pwd
          ${{ env.INSTALL_COMMAND }}

      - name: Checkmarx Security Scan
        id: checkmarx-security
        uses: ./.github/actions/checkmarx-scan
        with:
          enabled: ${{ env.ENABLE_CHECKMARX }}
          base-uri: ${{ secrets.CHECKMARX_BASE_URI || 'https://ast.checkmarx.net' }}
          checkmarx-client-id: ${{ secrets.CHECKMARX_CLIENT_ID }}
          checkmarx-secret: ${{ secrets.CHECKMARX_SECRET }}
          tenant: ${{ secrets.CHECKMARX_TENANT }}
          scan-types: ${{ env.CHECKMARX_SCAN_TYPES }}
          max-critical: ${{ env.MAX_CRITICAL_VULNERABILITIES }}
          max-high: ${{ env.MAX_HIGH_VULNERABILITIES }}
          preset: ${{ env.CHECKMARX_PRESET }}
          app-location: ${{ env.APP_LOCATION }}

  deploy-dev:
    if: always() && needs.detect-deployment.outputs.should-deploy-dev == 'true' && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test, sonar-analysis, checkmarx-scan]
    environment: development
    outputs:
      deployment-url: ${{ steps.deploy.outputs.static-web-app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.OUTPUT_LOCATION }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          if [ -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Downloaded artifacts size: $(du -sh ${{ env.OUTPUT_LOCATION }} | cut -f1)"
            echo "Artifact contents:"
            ls -la ${{ env.OUTPUT_LOCATION }}
          else
            echo "ERROR: Downloaded artifacts not found"
            exit 1
          fi

      - name: Deploy to Development
        id: deploy
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          environment: 'development'
          version: ${{ needs.detect-deployment.outputs.version }}
          app-location: ${{ env.APP_LOCATION }}
          output-location: ${{ env.OUTPUT_LOCATION }}
          skip-build: 'true'  # Using pre-built artifacts from build-and-test job

  deploy-staging:
    if: always() && needs.detect-deployment.outputs.should-deploy-staging == 'true' && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test, sonar-analysis, checkmarx-scan]
    environment: staging
    outputs:
      deployment-url: ${{ steps.deploy.outputs.static-web-app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.OUTPUT_LOCATION }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          if [ -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Downloaded artifacts size: $(du -sh ${{ env.OUTPUT_LOCATION }} | cut -f1)"
            echo "Artifact contents:"
            ls -la ${{ env.OUTPUT_LOCATION }}
          else
            echo "ERROR: Downloaded artifacts not found"
            exit 1
          fi

      - name: Deploy to Staging
        id: deploy
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          environment: 'staging'
          version: ${{ needs.detect-deployment.outputs.version }}
          app-location: ${{ env.APP_LOCATION }}
          output-location: ${{ env.OUTPUT_LOCATION }}
          skip-build: 'true'  # Using pre-built artifacts from build-and-test job

  deploy-qa:
    if: always() && needs.detect-deployment.outputs.should-deploy-qa == 'true' && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test, sonar-analysis, checkmarx-scan]
    environment: qa
    outputs:
      deployment-url: ${{ steps.deploy.outputs.static-web-app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.OUTPUT_LOCATION }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          if [ -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Downloaded artifacts size: $(du -sh ${{ env.OUTPUT_LOCATION }} | cut -f1)"
            echo "Artifact contents:"
            ls -la ${{ env.OUTPUT_LOCATION }}
          else
            echo "ERROR: Downloaded artifacts not found"
            exit 1
          fi

      - name: Deploy to QA
        id: deploy
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          environment: 'qa'
          version: ${{ needs.detect-deployment.outputs.version }}
          app-location: ${{ env.APP_LOCATION }}
          output-location: ${{ env.OUTPUT_LOCATION }}
          skip-build: 'true'  # Using pre-built artifacts from build-and-test job

  deploy-preprod:
    if: always() && needs.detect-deployment.outputs.should-deploy-preprod == 'true' && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test, sonar-analysis, checkmarx-scan]
    environment: pre-production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.static-web-app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.OUTPUT_LOCATION }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          if [ -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Downloaded artifacts size: $(du -sh ${{ env.OUTPUT_LOCATION }} | cut -f1)"
            echo "Artifact contents:"
            ls -la ${{ env.OUTPUT_LOCATION }}
          else
            echo "ERROR: Downloaded artifacts not found"
            exit 1
          fi

      - name: Deploy to Pre-Production
        id: deploy
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          environment: 'pre-production'
          version: ${{ needs.detect-deployment.outputs.version }}
          app-location: ${{ env.APP_LOCATION }}
          output-location: ${{ env.OUTPUT_LOCATION }}
          skip-build: 'true'  # Using pre-built artifacts from build-and-test job

  deploy-prod:
    if: always() && needs.detect-deployment.outputs.should-deploy-prod == 'true' && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, build-and-test, sonar-analysis, checkmarx-scan]
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.static-web-app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ${{ env.OUTPUT_LOCATION }}/

      - name: Verify Downloaded Artifacts
        run: |
          echo "Verifying downloaded build artifacts..."
          if [ -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Downloaded artifacts size: $(du -sh ${{ env.OUTPUT_LOCATION }} | cut -f1)"
            echo "Artifact contents:"
            ls -la ${{ env.OUTPUT_LOCATION }}
          else
            echo "ERROR: Downloaded artifacts not found"
            exit 1
          fi

      - name: Deploy to Production
        id: deploy
        uses: ./.github/actions/deploy-static-app
        with:
          azure-static-web-apps-api-token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          environment: 'production'
          version: ${{ needs.detect-deployment.outputs.version }}
          app-location: ${{ env.APP_LOCATION }}
          output-location: ${{ env.OUTPUT_LOCATION }}
          skip-build: 'true'  # Using pre-built artifacts from build-and-test job

  deployment-summary:
    if: always() && env.SKIP_DEPLOYMENT != 'true'
    runs-on: ubuntu-latest
    needs: [detect-deployment, sonar-analysis, checkmarx-scan, deploy-dev, deploy-staging, deploy-qa, deploy-preprod, deploy-prod]
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.detect-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-dev.result }}" = "success" ]; then
            echo "**Development**: ${{ needs.deploy-dev.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "**Staging**: ${{ needs.deploy-staging.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-qa.result }}" = "success" ]; then
            echo "**QA**: ${{ needs.deploy-qa.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-preprod.result }}" = "success" ]; then
            echo "**Pre-Production**: ${{ needs.deploy-preprod.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-prod.result }}" = "success" ]; then
            echo "**Production**: ${{ needs.deploy-prod.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref_name }}" == release/* ]]; then
            echo "**Production**: ⏳ Manual deployment required" >> $GITHUB_STEP_SUMMARY
            echo "To deploy to production: Run workflow manually with environment: 'production'" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.sonar-analysis.result }}" = "success" ]; then
            echo "**SonarCloud**: ${{ needs.sonar-analysis.outputs.status }} (Coverage: ${{ needs.sonar-analysis.outputs.coverage }}%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**SonarCloud**: ${{ needs.sonar-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.checkmarx-scan.result }}" = "success" ]; then
            echo "**Checkmarx**: ${{ needs.checkmarx-scan.outputs.status }} (Critical: ${{ needs.checkmarx-scan.outputs.critical-count }}, High: ${{ needs.checkmarx-scan.outputs.high-count }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Checkmarx**: ${{ needs.checkmarx-scan.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
