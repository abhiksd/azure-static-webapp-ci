name: Branch Protection

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    # Run daily to ensure protection rules are in place
    - cron: '0 9 * * *'

jobs:
  enforce-protection:
    name: Enforce Branch Protection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Protection rules for main branch
            const mainProtection = {
              required_status_checks: {
                strict: true,
                contexts: [
                  'validate-pr',
                  'Security Scan',
                  'Regression Tests',
                  'SonarCloud Quality Gate',
                  'Checkmarx Scan'
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 2,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                require_last_push_approval: true
              },
              restrictions: null,
              required_linear_history: true,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            };
            
            // Protection rules for develop branch
            const developProtection = {
              required_status_checks: {
                strict: true,
                contexts: [
                  'validate-pr',
                  'Security Scan',
                  'Regression Tests'
                ]
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: false,
                require_last_push_approval: false
              },
              restrictions: null,
              required_linear_history: false,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            };
            
            try {
              // Update main branch protection
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'main',
                ...mainProtection
              });
              console.log('✅ Main branch protection updated');
              
              // Update develop branch protection
              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch: 'develop',
                ...developProtection
              });
              console.log('✅ Develop branch protection updated');
              
            } catch (error) {
              console.error('❌ Failed to update branch protection:', error.message);
              // Don't fail the workflow if we can't update protection
              // This might happen due to insufficient permissions
            }

  check-pr-requirements:
    name: Check PR Requirements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check if PR title follows conventional commits format
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+ ]]; then
            echo "✅ PR title follows conventional commits format"
          else
            echo "❌ PR title must follow conventional commits format"
            echo "Examples: feat: add new feature, fix: resolve bug, docs: update readme"
            exit 1
          fi

      - name: Check PR description
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          
          if [ -z "$PR_BODY" ] || [ ${#PR_BODY} -lt 50 ]; then
            echo "❌ PR description is required and must be at least 50 characters"
            exit 1
          fi
          
          # Check if PR description contains required sections
          if [[ "$PR_BODY" != *"## Description"* ]] || [[ "$PR_BODY" != *"## Changes"* ]]; then
            echo "⚠️  PR description should include '## Description' and '## Changes' sections"
          fi
          
          echo "✅ PR description meets requirements"

      - name: Check for breaking changes
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Check if this is a breaking change
          if [[ "$PR_TITLE" == *"!"* ]] || [[ "$PR_BODY" == *"BREAKING CHANGE"* ]]; then
            echo "⚠️  This PR contains breaking changes"
            echo "Make sure to update the major version when merging"
          fi

      - name: Check file changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if sensitive files are modified
          SENSITIVE_FILES=(".github/workflows" "package.json" "Dockerfile" "docker-compose.yml")
          
          for file in $CHANGED_FILES; do
            for sensitive in "${SENSITIVE_FILES[@]}"; do
              if [[ "$file" == *"$sensitive"* ]]; then
                echo "⚠️  Sensitive file modified: $file"
                echo "Please ensure proper review for this change"
              fi
            done
          done

      - name: Label PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.issue.number;
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            
            // Determine labels based on PR content
            const labels = [];
            
            // Type-based labels
            if (prTitle.startsWith('feat')) labels.push('feature');
            if (prTitle.startsWith('fix')) labels.push('bugfix');
            if (prTitle.startsWith('docs')) labels.push('documentation');
            if (prTitle.startsWith('test')) labels.push('testing');
            if (prTitle.startsWith('chore')) labels.push('chore');
            if (prTitle.startsWith('ci')) labels.push('ci/cd');
            if (prTitle.startsWith('perf')) labels.push('performance');
            
            // Size-based labels
            const { data: prData } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const additions = prData.additions || 0;
            const deletions = prData.deletions || 0;
            const totalChanges = additions + deletions;
            
            if (totalChanges < 50) labels.push('size/small');
            else if (totalChanges < 200) labels.push('size/medium');
            else labels.push('size/large');
            
            // Breaking change label
            if (prTitle.includes('!') || prBody.includes('BREAKING CHANGE')) {
              labels.push('breaking-change');
            }
            
            // Security label
            if (prBody.toLowerCase().includes('security') || prTitle.toLowerCase().includes('security')) {
              labels.push('security');
            }
            
            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels
              });
              console.log(`✅ Applied labels: ${labels.join(', ')}`);
            }